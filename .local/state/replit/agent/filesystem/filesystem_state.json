{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Cannabis E-commerce Web Application\n\n## Overview\n\nThis is a comprehensive cannabis e-commerce web application built with React, TypeScript, and Express.js. The application features a bilingual (Myanmar/English) client-facing storefront and a secure admin management panel. The system is designed to showcase cannabis products organized by quality tiers with rich media support, contact integration, and comprehensive content management capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Internationalization**: Custom bilingual support for Myanmar and English languages\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured route handlers\n- **Data Validation**: Zod schemas for type-safe data validation\n- **Storage Layer**: Abstracted storage interface supporting both in-memory and database implementations\n- **Development**: Hot module replacement via Vite integration\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: PostgreSQL (configured for Supabase)\n- **Schema Structure**:\n  - Users table for admin authentication\n  - Products table with multilingual JSON fields and quality tiers\n  - Site content table for CMS functionality\n  - Contact info table for platform integration\n  - FAQ items table with multilingual support\n- **Data Types**: Extensive use of JSON columns for multilingual content and flexible data structures\n\n### Authentication & Authorization\n- **Client Auth**: Supabase authentication integration\n- **Admin Access**: Simple username/password authentication\n- **Session Management**: Supabase session handling with React hooks\n- **Route Protection**: Admin routes protected with authentication checks\n\n### Product Management System\n- **Quality Tiers**: Three-tier system (High, Medium, Low) with localized labels\n- **Media Support**: Multiple images and videos per product\n- **Multilingual Content**: JSON-based content storage for Myanmar and English\n- **Specifications**: Flexible specification lists in both languages\n- **Active Status**: Soft delete functionality with active/inactive states\n\n### Content Management\n- **Dynamic Sections**: Configurable site sections (about, how-to-order, FAQ)\n- **Multilingual CMS**: Full content management in both languages\n- **Contact Integration**: QR codes and direct links for Telegram, WhatsApp, and Messenger\n- **FAQ System**: Question/answer pairs with ordering and active status\n\n### File Upload & Media\n- **Cloud Storage**: Google Cloud Storage integration\n- **Upload Library**: Uppy.js for file uploads with AWS S3 compatibility\n- **Image Handling**: Support for multiple product images with responsive display\n- **Video Support**: Video gallery functionality for product demonstrations\n\n## External Dependencies\n\n### Database & Backend Services\n- **Supabase**: Primary database hosting and authentication service\n- **Neon Database**: Serverless PostgreSQL database driver (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n### Cloud Services\n- **Google Cloud Storage**: File and media storage (@google-cloud/storage)\n- **Vercel**: Deployment platform (configured for production builds)\n\n### UI & Component Libraries\n- **Radix UI**: Headless UI primitives for accessible components\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Component variant management\n\n### File Upload & Media Processing\n- **Uppy**: File upload library with dashboard UI (@uppy/core, @uppy/dashboard, @uppy/aws-s3)\n- **React Integration**: Uppy React wrapper (@uppy/react)\n\n### Development Tools\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Communication Platforms\n- **Telegram**: Direct messaging integration\n- **WhatsApp**: Business messaging support\n- **Facebook Messenger**: Social media messaging integration","size_bytes":4634},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        \"cannabis-bg\": \"var(--cannabis-bg)\",\n        \"cannabis-text\": \"var(--cannabis-text)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        myanmar: [\"var(--font-myanmar)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      aspectRatio: {\n        '4/3': '4 / 3',\n        '9/16': '9 / 16',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2665},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/database.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '@shared/schema';\n\n// Use environment variable for database connection\nconst databaseUrl = process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\n// Create postgres connection\nconst sql = postgres(databaseUrl, { prepare: false });\n\n// Create drizzle database instance\nexport const db = drizzle(sql, { schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  console.log('Starting YeYint Cannabis E-commerce Application...');\n  \n  // Seed database with initial data if using database storage\n  if (process.env.DATABASE_URL) {\n    try {\n      await seedDatabase();\n      console.log('Database seeded with sample products');\n    } catch (error) {\n      console.log('Seeding skipped (data may already exist)');\n    }\n  }\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2469},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// For this cannabis e-commerce admin panel, we'll keep ACL simple\n// since only admins upload product images and they should be public\n\nexport enum ObjectAccessGroupType {\n  ADMIN = \"admin\"\n}\n\nexport interface ObjectAccessGroup {\n  type: ObjectAccessGroupType;\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// Simple admin access group for this cannabis e-commerce app\nclass AdminAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType.ADMIN,\n    public readonly id: string,\n  ) {}\n\n  // For simplicity, any admin user ID is considered valid\n  public async hasMember(userId: string): Promise<boolean> {\n    return userId === \"admin\" || userId.startsWith(\"admin_\");\n  }\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): AdminAccessGroup {\n  switch (group.type) {\n    case ObjectAccessGroupType.ADMIN:\n      return new AdminAccessGroup(ObjectAccessGroupType.ADMIN, group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":3797},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n// Import ACL types - commenting out temporarily to fix build\n// import {\n//   ObjectAclPolicy,\n//   ObjectPermission,\n//   canAccessObject,\n//   getObjectAclPolicy,\n//   setObjectAclPolicy,\n// } from \"./objectAcl\";\n\n// Temporary inline types until ACL is needed\ninterface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n}\n\nenum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nconst getObjectAclPolicy = async (file: any): Promise<ObjectAclPolicy | null> => null;\nconst setObjectAclPolicy = async (file: any, policy: ObjectAclPolicy): Promise<void> => {};\nconst canAccessObject = async (params: any): Promise<boolean> => true;\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8934},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProductSchema, insertFaqItemSchema, insertContactInfoSchema } from \"@shared/schema\";\n// Using Supabase storage - handled client-side\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Products endpoints\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { quality } = req.query;\n      const products = await storage.getProducts(quality as string);\n      res.json(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getProduct(id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(validatedData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error('Error creating product:', error);\n      res.status(400).json({ error: \"Invalid product data\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, validatedData);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error('Error updating product:', error);\n      res.status(400).json({ error: \"Invalid product data\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProduct(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Site content endpoints\n  app.get(\"/api/content\", async (req, res) => {\n    try {\n      const content = await storage.getSiteContent();\n      res.json(content);\n    } catch (error) {\n      console.error('Error fetching content:', error);\n      res.status(500).json({ error: \"Failed to fetch content\" });\n    }\n  });\n\n  app.get(\"/api/content/:section\", async (req, res) => {\n    try {\n      const { section } = req.params;\n      const content = await storage.getSiteContentBySection(section);\n      if (!content) {\n        return res.status(404).json({ error: \"Content not found\" });\n      }\n      res.json(content);\n    } catch (error) {\n      console.error('Error fetching content:', error);\n      res.status(500).json({ error: \"Failed to fetch content\" });\n    }\n  });\n\n  // Contact info endpoints\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContactInfo();\n      res.json(contacts);\n    } catch (error) {\n      console.error('Error fetching contacts:', error);\n      res.status(500).json({ error: \"Failed to fetch contacts\" });\n    }\n  });\n\n  app.put(\"/api/contacts/:platform\", async (req, res) => {\n    try {\n      const { platform } = req.params;\n      const validatedData = insertContactInfoSchema.partial().parse(req.body);\n      console.log(`Updating contact for platform ${platform} with data:`, validatedData);\n      const contactInfo = await storage.updateContactInfo(platform, validatedData);\n      console.log(`Updated contact info:`, contactInfo);\n      res.json(contactInfo);\n    } catch (error) {\n      console.error('Error updating contact info:', error);\n      res.status(400).json({ error: \"Invalid contact data\" });\n    }\n  });\n\n  // FAQ endpoints\n  app.get(\"/api/faq\", async (req, res) => {\n    try {\n      const faqItems = await storage.getFaqItems();\n      res.json(faqItems);\n    } catch (error) {\n      console.error('Error fetching FAQ:', error);\n      res.status(500).json({ error: \"Failed to fetch FAQ\" });\n    }\n  });\n\n  app.post(\"/api/faq\", async (req, res) => {\n    try {\n      const validatedData = insertFaqItemSchema.parse(req.body);\n      const faqItem = await storage.createFaqItem(validatedData);\n      res.status(201).json(faqItem);\n    } catch (error) {\n      console.error('Error creating FAQ item:', error);\n      res.status(400).json({ error: \"Invalid FAQ data\" });\n    }\n  });\n\n  app.put(\"/api/faq/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertFaqItemSchema.partial().parse(req.body);\n      const faqItem = await storage.updateFaqItem(id, validatedData);\n      if (!faqItem) {\n        return res.status(404).json({ error: \"FAQ item not found\" });\n      }\n      res.json(faqItem);\n    } catch (error) {\n      console.error('Error updating FAQ item:', error);\n      res.status(400).json({ error: \"Invalid FAQ data\" });\n    }\n  });\n\n  app.delete(\"/api/faq/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteFaqItem(id);\n      if (!success) {\n        return res.status(404).json({ error: \"FAQ item not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting FAQ item:', error);\n      res.status(500).json({ error: \"Failed to delete FAQ item\" });\n    }\n  });\n\n  // Supabase storage is handled client-side, no server routes needed\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5958},"server/seed.ts":{"content":"import { db } from './database';\nimport { products, contactInfo, faqItems } from '@shared/schema';\n\n// Sample product data with 9:16 aspect ratio images\nconst sampleProducts = [\n  {\n    name: { \n      en: \"Premium OG Kush\", \n      my: \"ပရီမီယံ OG Kush\" \n    },\n    description: { \n      en: \"Premium grade OG Kush with exceptional quality and potency. Carefully cultivated and processed to ensure maximum satisfaction.\",\n      my: \"အရည်အသွေးမြင့် OG Kush ထူးထူးခြားခြား အရည်အသွေးနှင့် စွမ်းအားရှိသော။ အများဆုံးကျေနပ်မှုရရှိစေရန် ဂရုတစိုက်စိုက်ပျိုးပြီး ပြုပြင်ထားသည်။\"\n    },\n    quality: \"high\",\n    images: [\n      \"https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1617792369039-b4b1b8f67e8e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1612277795421-9bc7706a4a34?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Premium High Grade\", \"Type: Indica Dominant Hybrid\", \"Origin: Indoor cultivation\"],\n      my: [\"အရည်အသွေး: ပရီမီယံမြင့်မားသောအဆင့်\", \"အမျိုးအစား: Indica လွှမ်းမိုးနေသော မျိုးရိုးရိုး\", \"မူလ: အိမ်တွင်းစိုက်ပျိုးမှု\"]\n    },\n    isActive: true,\n  },\n  {\n    name: { \n      en: \"White Widow Elite\", \n      my: \"White Widow အထူး\" \n    },\n    description: { \n      en: \"Elite strain of White Widow known for its balanced effects and crystal-covered buds.\",\n      my: \"ကျွန်ုပ်တို့၏ အခြေအနေရှိတဲ့ သက်ရောက်မှုများနှင့် ကျောက်မျက်ရတနာပြည့်နှံ့သော ပွင့်များအတွက် လူသိများသော White Widow ၏ အထူးမျိုးရိုး။\"\n    },\n    quality: \"high\",\n    images: [\n      \"https://images.unsplash.com/photo-1605117882932-f9e32b03fea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Elite Grade\", \"Type: Balanced Hybrid\", \"THC: High Content\"],\n      my: [\"အရည်အသွေး: အထူးအဆင့်\", \"အမျိုးအစား: အခြေအနေရှိမျိုးရိုး\", \"THC: မြင့်မားသောပါဝင်မှု\"]\n    },\n    isActive: true,\n  },\n  {\n    name: { \n      en: \"Blue Dream Standard\", \n      my: \"Blue Dream စံ\" \n    },\n    description: { \n      en: \"Standard quality Blue Dream with balanced sativa-indica effects perfect for any time use.\",\n      my: \"အချိန်မရွေး အသုံးပြုရန် ပြီးပြည့်စုံသော sativa-indica အခြေအနေရှိ သက်ရောက်မှုများရှိသော Blue Dream စံအရည်အသွေး။\"\n    },\n    quality: \"medium\",\n    images: [\n      \"https://images.unsplash.com/photo-1536939459926-301728717817?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1617792369039-b4b1b8f67e8e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Standard Grade\", \"Type: Balanced Hybrid\", \"Effect: Versatile\"],\n      my: [\"အရည်အသွေး: စံအဆင့်\", \"အမျိုးအစား: အခြေအနေရှိမျိုးရိုး\", \"သက်ရောက်မှု: အမျိုးမျိုး\"]\n    },\n    isActive: true,\n  },\n  {\n    name: { \n      en: \"Green Crack Budget\", \n      my: \"Green Crack ငွေကုန်နည်း\" \n    },\n    description: { \n      en: \"Budget-friendly Green Crack with energizing effects, great value for money.\",\n      my: \"စွမ်းအင်ပေးသော သက်ရောက်မှုများရှိသော ငွေကုန်နည်းသော Green Crack၊ ငွေတန်ဖိုးကောင်းမွန်သော။\"\n    },\n    quality: \"low\",\n    images: [\n      \"https://images.unsplash.com/photo-1612277795421-9bc7706a4a34?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Budget Grade\", \"Type: Sativa Dominant\", \"Effect: Energizing\"],\n      my: [\"အရည်အသွေး: ငွေကုန်နည်းအဆင့်\", \"အမျိုးအစား: Sativa လွှမ်းမိုး\", \"သက်ရောက်မှု: စွမ်းအင်ပေး\"]\n    },\n    isActive: true,\n  },\n  {\n    name: { \n      en: \"Purple Haze Premium\", \n      my: \"Purple Haze ပရီမီယံ\" \n    },\n    description: { \n      en: \"Classic Purple Haze strain with distinctive purple coloration and uplifting effects.\",\n      my: \"ထူးခြားသော ခရမ်းရောင်နှင့် စိတ်ဓာတ်မြှင့်တင်သော သက်ရောက်မှုများရှိသော ဂန္တဝင် Purple Haze မျိုးရိုး။\"\n    },\n    quality: \"high\",\n    images: [\n      \"https://images.unsplash.com/photo-1605117882932-f9e32b03fea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1617792369039-b4b1b8f67e8e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Premium Grade\", \"Type: Sativa Dominant\", \"Color: Purple tints\"],\n      my: [\"အရည်အသွေး: ပရီမီယံအဆင့်\", \"အမျိုးအစား: Sativa လွှမ်းမိုး\", \"အရောင်: ခရမ်းရောင်ရောစပ်\"]\n    },\n    isActive: true,\n  },\n  {\n    name: { \n      en: \"Afghani Standard\", \n      my: \"Afghani စံ\" \n    },\n    description: { \n      en: \"Traditional Afghani indica strain with relaxing and sedating effects.\",\n      my: \"အပန်းဖြေစေသော နှင့် အေးချမ်းစေသော သက်ရောက်မှုများရှိသော ရိုးရာ Afghani indica မျိုးရိုး။\"\n    },\n    quality: \"medium\",\n    images: [\n      \"https://images.unsplash.com/photo-1536939459926-301728717817?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\",\n      \"https://images.unsplash.com/photo-1605117882932-f9e32b03fea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=700\"\n    ],\n    videos: [],\n    specifications: {\n      en: [\"Quality: Standard Grade\", \"Type: Pure Indica\", \"Effect: Relaxing\"],\n      my: [\"အရည်အသွေး: စံအဆင့်\", \"အမျိုးအစား: စစ်စစ် Indica\", \"သက်ရောက်မှု: အပန်းဖြေ\"]\n    },\n    isActive: true,\n  }\n];\n\nconst sampleContacts = [\n  {\n    platform: 'telegram',\n    url: 'https://t.me/yeyint_cannabis',\n    qrCode: null,\n    isActive: true,\n  },\n  {\n    platform: 'whatsapp',\n    url: 'https://wa.me/959123456789',\n    qrCode: null,\n    isActive: true,\n  },\n  {\n    platform: 'messenger',\n    url: 'https://m.me/yeyint.cannabis',\n    qrCode: null,\n    isActive: true,\n  }\n];\n\nconst sampleFaq = [\n  {\n    question: { \n      en: \"How do I place an order?\", \n      my: \"မှာယူမှုကို ဘယ်လိုလုပ်ရမလဲ?\" \n    },\n    answer: { \n      en: \"Contact us directly through any of our messaging platforms (Telegram, WhatsApp, or Messenger) with your product inquiry. Our team will guide you through the process.\",\n      my: \"သင်၏ ထုတ်ကုန်မေးမြန်းမှုနှင့်အတူ ကျွန်ုပ်တို့၏ မက်ဆေ့ချ် ပလပ်ဖောင်းများ (Telegram, WhatsApp, သို့မဟုတ် Messenger) မှတစ်ဆင့် တိုက်ရိုက်ဆက်သွယ်ပါ။ ကျွန်ုပ်တို့အဖွဲ့က လုပ်ငန်းစဉ်ကို လမ်းညွှန်ပေးပါမည်။\"\n    },\n    order: 1,\n    isActive: true,\n  },\n  {\n    question: { \n      en: \"What payment methods do you accept?\", \n      my: \"မည်သည့်ငွေပေးချေမှုနည်းလမ်းများကို လက်ခံပါသလဲ?\" \n    },\n    answer: { \n      en: \"Payment details will be discussed directly with our sales team through your preferred messaging platform. We ensure secure and convenient payment options.\",\n      my: \"ငွေပေးချေမှုအသေးစိတ်များကို သင်နှစ်သက်သော မက်ဆေ့ချ်ပလပ်ဖောင်းမှတစ်ဆင့် ကျွန်ုပ်တို့၏ရောင်းချရေးအဖွဲ့နှင့် တိုက်ရိုက်ဆွေးနွေးပါမည်။ ကျွန်ုပ်တို့သည် လုံခြုံပြီး အဆင်ပြေသော ငွေပေးချေမှုရွေးချယ်စရာများကို အာမခံပါသည်။\"\n    },\n    order: 2,\n    isActive: true,\n  },\n  {\n    question: { \n      en: \"How do you ensure product quality?\", \n      my: \"ပစ္စည်းများအရည်အသွေးကို ဘယ်လိုအာမခံပါသလဲ?\" \n    },\n    answer: { \n      en: \"We conduct quality checks on every product and guarantee customer satisfaction. All products are carefully sourced and tested before being offered.\",\n      my: \"ကျွန်ုပ်တို့သည် ထုတ်ကုန်တိုင်းအတွက် အရည်အသွေးစစ်ဆေးမှုများ ပြုလုပ်ပြီး၊ သုံးစွဲသူများ၏ စိတ်ကျေနပ်မှုကို အာမခံပါသည်။ ထုတ်ကုန်အားလုံးကို ကမ်းလှမ်းခြင်းမပြုမီ ဂရုတစိုက်ရယူပြီး စမ်းသပ်ထားပါသည်။\"\n    },\n    order: 3,\n    isActive: true,\n  }\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log('Seeding database...');\n    \n    // Insert sample products\n    for (const product of sampleProducts) {\n      await db.insert(products).values(product).onConflictDoNothing();\n    }\n    \n    // Insert sample contacts\n    for (const contact of sampleContacts) {\n      await db.insert(contactInfo).values(contact).onConflictDoNothing();\n    }\n    \n    // Insert sample FAQ\n    for (const faq of sampleFaq) {\n      await db.insert(faqItems).values(faq).onConflictDoNothing();\n    }\n    \n    console.log('Database seeded successfully!');\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}","size_bytes":11555},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type SiteContent,\n  type ContactInfo,\n  type FaqItem,\n  products,\n  users,\n  siteContent,\n  contactInfo,\n  faqItems\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from './database';\nimport { eq, and } from 'drizzle-orm';\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Product methods\n  getProducts(quality?: string): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string): Promise<boolean>;\n  \n  // Site content methods\n  getSiteContent(): Promise<SiteContent[]>;\n  getSiteContentBySection(section: string): Promise<SiteContent | undefined>;\n  updateSiteContent(section: string, content: any): Promise<SiteContent>;\n  \n  // Contact info methods\n  getContactInfo(): Promise<ContactInfo[]>;\n  getAllContactInfo(): Promise<ContactInfo[]>;\n  updateContactInfo(platform: string, info: Partial<ContactInfo>): Promise<ContactInfo>;\n  \n  // FAQ methods\n  getFaqItems(): Promise<FaqItem[]>;\n  getAllFaqItems(): Promise<FaqItem[]>;\n  createFaqItem(item: any): Promise<FaqItem>;\n  updateFaqItem(id: string, item: any): Promise<FaqItem | undefined>;\n  deleteFaqItem(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private products: Map<string, Product>;\n  private siteContent: Map<string, SiteContent>;\n  private contactInfo: Map<string, ContactInfo>;\n  private faqItems: Map<string, FaqItem>;\n\n  constructor() {\n    this.users = new Map();\n    this.products = new Map();\n    this.siteContent = new Map();\n    this.contactInfo = new Map();\n    this.faqItems = new Map();\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample products\n    const sampleProducts: Product[] = [\n      {\n        id: randomUUID(),\n        name: { en: \"Premium OG Kush\", my: \"ပရီမီယံ OG Kush\" },\n        description: { \n          en: \"Premium grade OG Kush with exceptional quality and potency. Carefully cultivated and processed to ensure maximum satisfaction.\",\n          my: \"အရည်အသွေးမြင့် OG Kush ထူးထူးခြားခြား အရည်အသွေးနှင့် စွမ်းအားရှိသော။ အများဆုံးကျေနပ်မှုရရှိစေရန် ဂရုတစိုက်စိုက်ပျိုးပြီး ပြုပြင်ထားသည်။\"\n        },\n        quality: \"high\",\n        images: [\n          \"https://images.unsplash.com/photo-1536939459926-301728717817?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1612277795421-9bc7706a4a34?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\",\n          \"https://images.unsplash.com/photo-1605117882932-f9e32b03fea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"\n        ],\n        videos: [],\n        specifications: {\n          en: [\"Quality: Premium High Grade\", \"Type: Indica Dominant Hybrid\", \"Origin: Indoor cultivation\"],\n          my: [\"အရည်အသွေး: ပရီမီယံမြင့်မားသောအဆင့်\", \"အမျိုးအစား: Indica လွှမ်းမိုးနေသော မျိုးရိုးရိုး\", \"မူလ: အိမ်တွင်းစိုက်ပျိုးမှု\"]\n        },\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: { en: \"White Widow Elite\", my: \"White Widow အထူး\" },\n        description: { \n          en: \"Elite strain of White Widow known for its balanced effects and crystal-covered buds.\",\n          my: \"ကျွန်ုပ်တို့၏ အခြေအနေရှိတဲ့ သက်ရောက်မှုများနှင့် ကျောက်မျက်ရတနာပြည့်နှံ့သော ပွင့်များအတွက် လူသိများသော White Widow ၏ အထူးမျိုးရိုး။\"\n        },\n        quality: \"high\",\n        images: [\n          \"https://images.unsplash.com/photo-1612277795421-9bc7706a4a34?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1536939459926-301728717817?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\"\n        ],\n        videos: [],\n        specifications: {\n          en: [\"Quality: Elite Grade\", \"Type: Balanced Hybrid\", \"THC: High Content\"],\n          my: [\"အရည်အသွေး: အထူးအဆင့်\", \"အမျိုးအစား: အခြေအနေရှိမျိုးရိုး\", \"THC: မြင့်မားသောပါဝင်မှု\"]\n        },\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        name: { en: \"Green Crack Standard\", my: \"Green Crack စံ\" },\n        description: { \n          en: \"Standard quality Green Crack with energizing effects perfect for daytime use.\",\n          my: \"နေ့အချိန်အသုံးပြုရန် ပြီးပြည့်စုံသော စွမ်းအင်ပေးသော သက်ရောက်မှုများရှိသော Green Crack စံအရည်အသွေး။\"\n        },\n        quality: \"medium\",\n        images: [\n          \"https://images.unsplash.com/photo-1605117882932-f9e32b03fea9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        videos: [],\n        specifications: {\n          en: [\"Quality: Standard Grade\", \"Type: Sativa Dominant\", \"Effect: Energizing\"],\n          my: [\"အရည်အသွေး: စံအဆင့်\", \"အမျိုးအစား: Sativa လွှမ်းမိုး\", \"သက်ရောက်မှု: စွမ်းအင်ပေး\"]\n        },\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    sampleProducts.forEach(product => {\n      this.products.set(product.id, product);\n    });\n\n    // Sample contact info\n    const sampleContacts: ContactInfo[] = [\n      {\n        id: randomUUID(),\n        platform: 'telegram',\n        url: 'https://t.me/yeyint_cannabis',\n        qrCode: null,\n        isActive: true,\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        platform: 'whatsapp',\n        url: 'https://wa.me/959123456789',\n        qrCode: null,\n        isActive: true,\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        platform: 'messenger',\n        url: 'https://m.me/yeyint.cannabis',\n        qrCode: null,\n        isActive: true,\n        updatedAt: new Date(),\n      }\n    ];\n\n    sampleContacts.forEach(contact => {\n      this.contactInfo.set(contact.id, contact);\n    });\n\n    // Sample FAQ items\n    const sampleFaq: FaqItem[] = [\n      {\n        id: randomUUID(),\n        question: { \n          en: \"How do I place an order?\", \n          my: \"မှာယူမှုကို ဘယ်လိုလုပ်ရမလဲ?\" \n        },\n        answer: { \n          en: \"Contact us directly through any of our messaging platforms (Telegram, WhatsApp, or Messenger) with your product inquiry.\",\n          my: \"သင်၏ ထုတ်ကုန်မေးမြန်းမှုနှင့်အတူ ကျွန်ုပ်တို့၏ မက်ဆေ့ချ် ပလပ်ဖောင်းများ (Telegram, WhatsApp, သို့မဟုတ် Messenger) မှတစ်ဆင့် တိုက်ရိုက်ဆက်သွယ်ပါ။\"\n        },\n        order: 1,\n        isActive: true,\n        updatedAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        question: { \n          en: \"What payment methods do you accept?\", \n          my: \"မည်သည့်ငွေပေးချေမှုနည်းလမ်းများကို လက်ခံပါသလဲ?\" \n        },\n        answer: { \n          en: \"Payment details will be discussed directly with our sales team through your preferred messaging platform.\",\n          my: \"ငွေပေးချေမှုအသေးစိတ်များကို သင်နှစ်သက်သော မက်ဆေ့ချ်ပလပ်ဖောင်းမှတစ်ဆင့် ကျွန်ုပ်တို့၏ရောင်းချရေးအဖွဲ့နှင့် တိုက်ရိုက်ဆွေးနွေးပါမည်။\"\n        },\n        order: 2,\n        isActive: true,\n        updatedAt: new Date(),\n      }\n    ];\n\n    sampleFaq.forEach(faq => {\n      this.faqItems.set(faq.id, faq);\n    });\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Product methods\n  async getProducts(quality?: string): Promise<Product[]> {\n    let products = Array.from(this.products.values());\n    \n    if (quality && quality !== 'all') {\n      products = products.filter(product => product.quality === quality);\n    }\n    \n    return products.filter(product => product.isActive)\n      .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    const newProduct: Product = {\n      ...product,\n      id,\n      images: product.images || [],\n      videos: product.videos || [],\n      specifications: product.specifications || { en: [], my: [] },\n      isActive: product.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.products.set(id, newProduct);\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) {\n      return undefined;\n    }\n\n    const updatedProduct: Product = {\n      ...existingProduct,\n      ...product,\n      updatedAt: new Date(),\n    };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    return this.products.delete(id);\n  }\n\n  // Site content methods\n  async getSiteContent(): Promise<SiteContent[]> {\n    return Array.from(this.siteContent.values());\n  }\n\n  async getSiteContentBySection(section: string): Promise<SiteContent | undefined> {\n    return Array.from(this.siteContent.values()).find(content => content.section === section);\n  }\n\n  async updateSiteContent(section: string, content: any): Promise<SiteContent> {\n    const existing = await this.getSiteContentBySection(section);\n    \n    if (existing) {\n      const updated: SiteContent = {\n        ...existing,\n        content,\n        updatedAt: new Date(),\n      };\n      this.siteContent.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newContent: SiteContent = {\n        id,\n        section,\n        content,\n        updatedAt: new Date(),\n      };\n      this.siteContent.set(id, newContent);\n      return newContent;\n    }\n  }\n\n  // Contact info methods\n  async getContactInfo(): Promise<ContactInfo[]> {\n    return Array.from(this.contactInfo.values()).filter(contact => contact.isActive);\n  }\n\n  async getAllContactInfo(): Promise<ContactInfo[]> {\n    return Array.from(this.contactInfo.values());\n  }\n\n  async updateContactInfo(platform: string, info: Partial<ContactInfo>): Promise<ContactInfo> {\n    const existing = Array.from(this.contactInfo.values()).find(contact => contact.platform === platform);\n    \n    if (existing) {\n      const updated: ContactInfo = {\n        ...existing,\n        ...info,\n        updatedAt: new Date(),\n      };\n      this.contactInfo.set(existing.id, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const newContact: ContactInfo = {\n        id,\n        platform,\n        url: '',\n        qrCode: null,\n        isActive: true,\n        ...info,\n        updatedAt: new Date(),\n      };\n      this.contactInfo.set(id, newContact);\n      return newContact;\n    }\n  }\n\n  // FAQ methods\n  async getFaqItems(): Promise<FaqItem[]> {\n    return Array.from(this.faqItems.values())\n      .filter(item => item.isActive)\n      .sort((a, b) => (a.order || 0) - (b.order || 0));\n  }\n\n  async getAllFaqItems(): Promise<FaqItem[]> {\n    return Array.from(this.faqItems.values())\n      .sort((a, b) => (a.order || 0) - (b.order || 0));\n  }\n\n  async createFaqItem(item: any): Promise<FaqItem> {\n    const id = randomUUID();\n    const newItem: FaqItem = {\n      ...item,\n      id,\n      updatedAt: new Date(),\n    };\n    this.faqItems.set(id, newItem);\n    return newItem;\n  }\n\n  async updateFaqItem(id: string, item: any): Promise<FaqItem | undefined> {\n    const existing = this.faqItems.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: FaqItem = {\n      ...existing,\n      ...item,\n      updatedAt: new Date(),\n    };\n    this.faqItems.set(id, updated);\n    return updated;\n  }\n\n  async deleteFaqItem(id: string): Promise<boolean> {\n    return this.faqItems.delete(id);\n  }\n}\n\n// Database storage implementation\nexport class DbStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  // Product methods\n  async getProducts(quality?: string): Promise<Product[]> {\n    let query = db.select().from(products).where(eq(products.isActive, true));\n    \n    if (quality && quality !== 'all') {\n      query = db.select().from(products).where(\n        and(\n          eq(products.isActive, true),\n          eq(products.quality, quality)\n        )\n      );\n    }\n    \n    const result = await query.orderBy(products.createdAt);\n    return result;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product | undefined> {\n    const result = await db.update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProduct(id: string): Promise<boolean> {\n    try {\n      await db.delete(products).where(eq(products.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      return false;\n    }\n  }\n\n  // Site content methods\n  async getSiteContent(): Promise<SiteContent[]> {\n    return await db.select().from(siteContent);\n  }\n\n  async getSiteContentBySection(section: string): Promise<SiteContent | undefined> {\n    const result = await db.select().from(siteContent).where(eq(siteContent.section, section)).limit(1);\n    return result[0];\n  }\n\n  async updateSiteContent(section: string, content: any): Promise<SiteContent> {\n    const existing = await this.getSiteContentBySection(section);\n    \n    if (existing) {\n      const result = await db.update(siteContent)\n        .set({ content, updatedAt: new Date() })\n        .where(eq(siteContent.id, existing.id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(siteContent)\n        .values({ section, content })\n        .returning();\n      return result[0];\n    }\n  }\n\n  // Contact info methods\n  async getContactInfo(): Promise<ContactInfo[]> {\n    return await db.select().from(contactInfo).where(eq(contactInfo.isActive, true));\n  }\n\n  async getAllContactInfo(): Promise<ContactInfo[]> {\n    return await db.select().from(contactInfo);\n  }\n\n  async updateContactInfo(platform: string, info: Partial<ContactInfo>): Promise<ContactInfo> {\n    // Get existing record to preserve fields not being updated\n    const existing = await db.select().from(contactInfo).where(eq(contactInfo.platform, platform)).limit(1);\n    \n    // Delete existing records for this platform to prevent duplicates\n    await db.delete(contactInfo).where(eq(contactInfo.platform, platform));\n    \n    // Merge existing data with new updates, defaulting missing required fields\n    const mergedData = {\n      platform,\n      url: existing[0]?.url || '',\n      qrCode: existing[0]?.qrCode || null,\n      isActive: existing[0]?.isActive ?? true,\n      ...info // This will override any fields provided in the update\n    };\n    \n    // Insert the merged record\n    const result = await db.insert(contactInfo)\n      .values(mergedData)\n      .returning();\n    return result[0];\n  }\n\n  // FAQ methods\n  async getFaqItems(): Promise<FaqItem[]> {\n    return await db.select().from(faqItems)\n      .where(eq(faqItems.isActive, true))\n      .orderBy(faqItems.order);\n  }\n\n  async getAllFaqItems(): Promise<FaqItem[]> {\n    return await db.select().from(faqItems)\n      .orderBy(faqItems.order);\n  }\n\n  async createFaqItem(item: any): Promise<FaqItem> {\n    const result = await db.insert(faqItems).values(item).returning();\n    return result[0];\n  }\n\n  async updateFaqItem(id: string, item: any): Promise<FaqItem | undefined> {\n    const result = await db.update(faqItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(faqItems.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteFaqItem(id: string): Promise<boolean> {\n    try {\n      await db.delete(faqItems).where(eq(faqItems.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting FAQ item:', error);\n      return false;\n    }\n  }\n}\n\n// Use database storage if DATABASE_URL is available, otherwise use memory storage\nexport const storage = process.env.DATABASE_URL ? new DbStorage() : new MemStorage();\n","size_bytes":19276},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: json(\"name\").notNull(), // {en: string, my: string}\n  description: json(\"description\").notNull(), // {en: string, my: string}\n  quality: text(\"quality\").notNull(), // 'high' | 'medium' | 'low'\n  images: json(\"images\").$type<string[]>().notNull().default([]),\n  videos: json(\"videos\").$type<string[]>().notNull().default([]),\n  specifications: json(\"specifications\").$type<{en: string[], my: string[]}>().default({en: [], my: []}),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const siteContent = pgTable(\"site_content\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  section: text(\"section\").notNull(), // 'about', 'how-to-order', 'faq', etc.\n  content: json(\"content\").notNull(), // {en: any, my: any}\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const contactInfo = pgTable(\"contact_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: text(\"platform\").notNull().unique(), // 'telegram', 'whatsapp', 'messenger'\n  url: text(\"url\").notNull(),\n  qrCode: text(\"qr_code\"), // base64 or URL to QR code image\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const faqItems = pgTable(\"faq_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: json(\"question\").notNull(), // {en: string, my: string}\n  answer: json(\"answer\").notNull(), // {en: string, my: string}\n  order: integer(\"order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSiteContentSchema = createInsertSchema(siteContent).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertContactInfoSchema = createInsertSchema(contactInfo).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertFaqItemSchema = createInsertSchema(faqItems).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type SiteContent = typeof siteContent.$inferSelect;\nexport type InsertSiteContent = z.infer<typeof insertSiteContentSchema>;\n\nexport type ContactInfo = typeof contactInfo.$inferSelect;\nexport type InsertContactInfo = z.infer<typeof insertContactInfoSchema>;\n\nexport type FaqItem = typeof faqItems.$inferSelect;\nexport type InsertFaqItem = z.infer<typeof insertFaqItemSchema>;\n","size_bytes":3468},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport HomePage from \"@/pages/home\";\nimport AdminPage from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":798},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Myanmar:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(249, 10%, 98%);\n  --foreground: hsl(0, 0%, 10.98%);\n  --card: hsl(249, 10%, 98%);\n  --card-foreground: hsl(0, 0%, 10.98%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 10.98%);\n  --primary: hsl(91, 49%, 20%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(87, 47%, 54%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 5%, 96%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(15, 100%, 61%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 6%, 90%);\n  --input: hsl(240, 6%, 90%);\n  --ring: hsl(91, 49%, 20%);\n  --success: hsl(122, 39%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --cannabis-bg: hsl(220, 14%, 98%);\n  --cannabis-text: hsl(0, 0%, 11%);\n  --font-sans: 'Inter', 'Noto Sans Myanmar', sans-serif;\n  --font-myanmar: 'Noto Sans Myanmar', sans-serif;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(91, 49%, 20%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(87, 47%, 54%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 14.9%);\n  --muted-foreground: hsl(0, 0%, 63.9%);\n  --accent: hsl(15, 100%, 61%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 14.9%);\n  --input: hsl(0, 0%, 14.9%);\n  --ring: hsl(91, 49%, 20%);\n  --success: hsl(122, 39%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-cannabis-bg text-cannabis-text font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n  \n  .font-myanmar {\n    font-family: var(--font-myanmar);\n  }\n}\n\n@layer components {\n  .product-card {\n    @apply transition-all duration-300 ease-in-out hover:transform hover:-translate-y-1 hover:shadow-xl;\n  }\n  \n  .modal-overlay {\n    backdrop-filter: blur(4px);\n  }\n  \n  .image-carousel {\n    scroll-behavior: smooth;\n  }\n  \n  .admin-sidebar {\n    @apply transition-transform duration-300 ease-in-out;\n  }\n  \n  @media (max-width: 768px) {\n    .admin-sidebar.closed {\n      @apply transform -translate-x-full;\n    }\n  }\n  \n  .quality-high {\n    @apply bg-success text-success-foreground;\n  }\n  \n  .quality-medium {\n    @apply bg-secondary text-secondary-foreground;\n  }\n  \n  .quality-low {\n    @apply bg-muted text-muted-foreground;\n  }\n}\n\n@layer utilities {\n  .aspect-9-16 {\n    aspect-ratio: 9 / 16;\n  }\n  \n  .aspect-video {\n    aspect-ratio: 9 / 16;\n  }\n  \n  .aspect-4-3 {\n    aspect-ratio: 4 / 3;\n  }\n  \n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n}\n","size_bytes":3169},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminSidebar.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { \n  BarChart3, \n  Leaf, \n  Images, \n  Edit, \n  BookOpen, \n  HelpCircle,\n  Menu,\n  LogOut\n} from 'lucide-react';\n\ninterface AdminSidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n  onLogout: () => void;\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nconst menuItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },\n  { id: 'products', label: 'Products', icon: Leaf },\n  { id: 'media', label: 'Media', icon: Images },\n  { id: 'content', label: 'Content', icon: Edit },\n  { id: 'contacts', label: 'Contacts', icon: BookOpen },\n  { id: 'faq', label: 'FAQ Management', icon: HelpCircle },\n];\n\nexport function AdminSidebar({ \n  activeSection, \n  onSectionChange, \n  onLogout,\n  isOpen,\n  onToggle \n}: AdminSidebarProps) {\n  return (\n    <>\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"md:hidden fixed top-4 left-4 z-50\"\n        onClick={onToggle}\n      >\n        <Menu className=\"w-4 h-4\" />\n      </Button>\n      \n      <aside className={`admin-sidebar w-64 bg-white shadow-sm fixed md:static inset-y-0 left-0 z-40 transform transition-transform duration-300 ease-in-out ${\n        isOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'\n      }`}>\n        {/* Overlay for mobile */}\n        {isOpen && (\n          <div \n            className=\"md:hidden fixed inset-0 bg-black bg-opacity-50 z-30\"\n            onClick={onToggle}\n          />\n        )}\n        \n        <div className=\"relative z-40 bg-white h-full\">\n          <div className=\"p-4 border-b\">\n            <h2 className=\"text-lg font-bold text-primary\">YeYint Admin</h2>\n          </div>\n          \n          <nav className=\"mt-8 px-4\">\n            <div className=\"space-y-2\">\n              {menuItems.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Button\n                    key={item.id}\n                    variant={activeSection === item.id ? 'default' : 'ghost'}\n                    className=\"w-full justify-start\"\n                    onClick={() => onSectionChange(item.id)}\n                  >\n                    <Icon className=\"w-4 h-4 mr-3\" />\n                    {item.label}\n                  </Button>\n                );\n              })}\n            </div>\n            \n            <div className=\"mt-8 pt-4 border-t\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10\"\n                onClick={onLogout}\n              >\n                <LogOut className=\"w-4 h-4 mr-3\" />\n                Logout\n              </Button>\n            </div>\n          </nav>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":2792},"client/src/components/Header.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { LanguageToggle } from './LanguageToggle';\nimport { Language } from '@/types';\nimport { Shield } from 'lucide-react';\n\ninterface HeaderProps {\n  currentLanguage: Language;\n  onLanguageChange: (language: Language) => void;\n  onAdminLogin: () => void;\n}\n\nexport function Header({ currentLanguage, onLanguageChange, onAdminLogin }: HeaderProps) {\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-border sticky top-0 z-40\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <h1 className=\"text-2xl font-bold text-primary\">Nyo</h1>\n            <span className=\"ml-2 text-sm text-muted-foreground\">Premium Cannabis</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <LanguageToggle \n              currentLanguage={currentLanguage}\n              onLanguageChange={onLanguageChange}\n            />\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-sm text-primary hover:text-secondary font-medium\"\n              onClick={onAdminLogin}\n            >\n              <Shield className=\"w-4 h-4 mr-1\" />\n              Login\n            </Button>\n          </div>\n        </div>\n        \n        <nav className=\"flex space-x-8 pb-4\">\n          <button\n            onClick={() => scrollToSection('products')}\n            className=\"text-primary border-b-2 border-primary pb-2 font-medium\"\n          >\n            Products\n          </button>\n          <button\n            onClick={() => scrollToSection('about')}\n            className=\"text-muted-foreground hover:text-primary pb-2 transition-colors\"\n          >\n            About Us\n          </button>\n          <button\n            onClick={() => scrollToSection('how-to-order')}\n            className=\"text-muted-foreground hover:text-primary pb-2 transition-colors\"\n          >\n            How to Order\n          </button>\n          <button\n            onClick={() => scrollToSection('faq')}\n            className=\"text-muted-foreground hover:text-primary pb-2 transition-colors\"\n          >\n            FAQ\n          </button>\n        </nav>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2540},"client/src/components/LanguageToggle.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Language } from '@/types';\n\ninterface LanguageToggleProps {\n  currentLanguage: Language;\n  onLanguageChange: (language: Language) => void;\n}\n\nexport function LanguageToggle({ currentLanguage, onLanguageChange }: LanguageToggleProps) {\n  return (\n    <div className=\"flex bg-gray-100 rounded-lg p-1\">\n      <Button\n        variant={currentLanguage === 'my' ? 'default' : 'ghost'}\n        size=\"sm\"\n        className={`px-3 py-1 text-sm font-myanmar font-medium rounded-md ${\n          currentLanguage === 'my' \n            ? 'bg-primary text-primary-foreground' \n            : 'text-gray-600 hover:text-primary'\n        }`}\n        onClick={() => onLanguageChange('my')}\n      >\n        မြန်မာ\n      </Button>\n      <Button\n        variant={currentLanguage === 'en' ? 'default' : 'ghost'}\n        size=\"sm\"\n        className={`px-3 py-1 text-sm font-medium rounded-md ${\n          currentLanguage === 'en' \n            ? 'bg-primary text-primary-foreground' \n            : 'text-gray-600 hover:text-primary'\n        }`}\n        onClick={() => onLanguageChange('en')}\n      >\n        English\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1194},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/lib/supabase\";\nimport { Upload } from \"lucide-react\";\n\n// Image optimization utilities\nconst MAX_DIMENSION = 2048; // 2048x2048 for optimal e-commerce display\nconst COMPRESSION_QUALITY = 0.85; // 85% quality for good balance\nconst TARGET_FILE_SIZE = 300 * 1024; // 300KB target\n\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n}\n\nfunction compressImage(file: File): Promise<{ blob: Blob; originalSize: number; compressedSize: number; dimensions: string }> {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    \n    img.onload = () => {\n      // Calculate optimal dimensions (square aspect ratio)\n      let { width, height } = img;\n      const originalSize = file.size;\n      \n      // Resize to fit within MAX_DIMENSION while maintaining aspect ratio\n      if (width > height) {\n        if (width > MAX_DIMENSION) {\n          height = (height * MAX_DIMENSION) / width;\n          width = MAX_DIMENSION;\n        }\n      } else {\n        if (height > MAX_DIMENSION) {\n          width = (width * MAX_DIMENSION) / height;\n          height = MAX_DIMENSION;\n        }\n      }\n      \n      // For e-commerce, we want square images - crop to square\n      const size = Math.min(width, height);\n      canvas.width = size;\n      canvas.height = size;\n      \n      // Draw image centered and cropped to square\n      const offsetX = (img.width - size) / 2;\n      const offsetY = (img.height - size) / 2;\n      \n      ctx?.drawImage(img, offsetX, offsetY, size, size, 0, 0, size, size);\n      \n      // Try different quality levels to hit target file size\n      let quality = COMPRESSION_QUALITY;\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          reject(new Error('Failed to compress image'));\n          return;\n        }\n        \n        const compressedSize = blob.size;\n        const dimensions = `${size}x${size}px`;\n        \n        // If still too large, try lower quality\n        if (compressedSize > TARGET_FILE_SIZE && quality > 0.5) {\n          quality = Math.max(0.5, quality - 0.1);\n          canvas.toBlob((newBlob) => {\n            if (!newBlob) {\n              reject(new Error('Failed to compress image'));\n              return;\n            }\n            resolve({\n              blob: newBlob,\n              originalSize,\n              compressedSize: newBlob.size,\n              dimensions\n            });\n          }, 'image/jpeg', quality);\n        } else {\n          resolve({\n            blob,\n            originalSize,\n            compressedSize,\n            dimensions\n          });\n        }\n      }, 'image/jpeg', quality);\n    };\n    \n    img.onerror = () => reject(new Error('Failed to load image'));\n    img.src = URL.createObjectURL(file);\n  });\n}\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onComplete?: (uploadedUrls: string[]) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 20971520, // 20MB default for cannabis e-commerce images\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setIsUploading(true);\n\n    try {\n      const uploadedUrls: string[] = [];\n      \n      for (const file of Array.from(files)) {\n        // Check file size\n        if (file.size > maxFileSize) {\n          toast({\n            title: \"File too large\",\n            description: `${file.name} exceeds the 20MB limit`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        // Check file type (allow images and videos)\n        if (!file.type.startsWith('image/') && !file.type.startsWith('video/')) {\n          toast({\n            title: \"Invalid file type\",\n            description: `${file.name} must be an image or video file`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        let fileToUpload: File | Blob = file;\n        let uploadFileName = file.name;\n        let optimizationMessage = '';\n\n        // Optimize images automatically\n        if (file.type.startsWith('image/')) {\n          try {\n            toast({\n              title: \"Optimizing image...\",\n              description: `Processing ${file.name} for best web performance`,\n            });\n\n            const { blob, originalSize, compressedSize, dimensions } = await compressImage(file);\n            fileToUpload = blob;\n            uploadFileName = file.name.replace(/\\.(jpg|jpeg|png|gif|webp)$/i, '.jpg'); // Convert to JPEG\n            \n            const savingsPercent = Math.round(((originalSize - compressedSize) / originalSize) * 100);\n            optimizationMessage = `Optimized: ${formatFileSize(originalSize)} → ${formatFileSize(compressedSize)} (${savingsPercent}% smaller, ${dimensions})`;\n            \n            toast({\n              title: \"Image optimized!\",\n              description: optimizationMessage,\n              duration: 3000,\n            });\n          } catch (compressionError) {\n            console.error('Image compression failed:', compressionError);\n            toast({\n              title: \"Optimization failed\",\n              description: `Using original image for ${file.name}`,\n              variant: \"destructive\",\n            });\n            // Continue with original file if compression fails\n          }\n        }\n\n        // Upload to Supabase storage\n        const fileName = `products/${Date.now()}-${uploadFileName}`;\n        const bucketName = file.type.startsWith('video/') ? 'product-videos' : 'product-images';\n        \n        const { data, error } = await supabase.storage\n          .from(bucketName)\n          .upload(fileName, fileToUpload, {\n            cacheControl: '3600',\n            upsert: false\n          });\n\n        if (error) {\n          console.error('Supabase upload error:', error);\n          \n          // Provide specific error messages for common issues\n          let errorMessage = error.message;\n          if (error.message.includes('row-level security')) {\n            errorMessage = `Storage access denied. Please configure Supabase RLS policies for ${bucketName} bucket.`;\n          } else if (error.message.includes('Bucket not found')) {\n            errorMessage = `Storage bucket '${bucketName}' not found. Please create it in your Supabase dashboard.`;\n          }\n          \n          toast({\n            title: \"Upload failed\",\n            description: `${file.name}: ${errorMessage}`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n\n        // Get public URL\n        const { data: urlData } = supabase.storage\n          .from(bucketName)\n          .getPublicUrl(data.path);\n\n        uploadedUrls.push(urlData.publicUrl);\n      }\n\n      if (uploadedUrls.length > 0) {\n        toast({\n          title: \"Upload successful!\",\n          description: `Uploaded ${uploadedUrls.length} optimized image(s) to storage`,\n        });\n        onComplete?.(uploadedUrls);\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload error\",\n        description: \"An unexpected error occurred during upload\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      // Reset the input\n      event.target.value = '';\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"file\"\n        multiple\n        accept=\"image/*,video/*\"\n        onChange={handleFileSelect}\n        style={{ display: 'none' }}\n        id=\"supabase-file-upload\"\n        max={maxNumberOfFiles}\n      />\n      <Button \n        type=\"button\" \n        onClick={() => {\n          document.getElementById('supabase-file-upload')?.click();\n        }}\n        className={buttonClassName}\n        data-testid=\"button-upload-files\"\n        disabled={isUploading}\n      >\n        {isUploading ? (\n          <>\n            <Upload className=\"w-4 h-4 mr-2 animate-spin\" />\n            Uploading...\n          </>\n        ) : (\n          children\n        )}\n      </Button>\n    </div>\n  );\n}","size_bytes":9992},"client/src/components/ProductCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronRight } from 'lucide-react';\nimport { Product } from '@shared/schema';\nimport { Language, QUALITY_TIERS } from '@/types';\n\ninterface ProductCardProps {\n  product: Product;\n  language: Language;\n  onClick: () => void;\n}\n\nexport function ProductCard({ product, language, onClick }: ProductCardProps) {\n  const name = (product.name as any)?.[language] || 'Product Name';\n  const description = (product.description as any)?.[language] || 'Product Description';\n  \n  const qualityTier = QUALITY_TIERS.find(tier => tier.id === product.quality);\n  const qualityLabel = qualityTier?.label[language] || product.quality;\n  \n  const previewImage = product.images?.[0] || 'https://images.unsplash.com/photo-1536939459926-301728717817?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600';\n\n  return (\n    <Card \n      className=\"product-card cursor-pointer overflow-hidden\"\n      onClick={onClick}\n    >\n      <div className=\"relative overflow-hidden\" style={{ aspectRatio: product.images?.[0] ? 'auto' : '4/3', minHeight: '200px' }}>\n        <img \n          src={previewImage} \n          alt={name}\n          className=\"w-full h-full object-cover\"\n          style={{ aspectRatio: 'auto' }}\n        />\n        <div className=\"absolute top-3 right-3\">\n          <Badge className={qualityTier?.className || 'bg-muted text-muted-foreground'}>\n            {qualityLabel}\n          </Badge>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <h3 className=\"font-bold text-lg mb-2 line-clamp-1\">{name}</h3>\n        <p className={`text-muted-foreground text-sm mb-3 line-clamp-2 ${\n          language === 'my' ? 'font-myanmar' : ''\n        }`}>\n          {description}\n        </p>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-primary font-bold\">Contact for Price</span>\n          <ChevronRight className=\"w-4 h-4 text-muted-foreground\" />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2067},"client/src/components/ProductDetailModal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { X, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Product } from '@shared/schema';\nimport { Language, QUALITY_TIERS } from '@/types';\nimport { useContactInfo } from '@/hooks/useContacts';\n\ninterface ProductDetailModalProps {\n  product: Product | null;\n  language: Language;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProductDetailModal({ product, language, isOpen, onClose }: ProductDetailModalProps) {\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const { data: contactInfo = [] } = useContactInfo();\n\n  if (!product) return null;\n\n  const name = (product.name as any)?.[language] || 'Product Name';\n  const description = (product.description as any)?.[language] || 'Product Description';\n  const specifications = (product.specifications as any)?.[language] || [];\n  \n  const qualityTier = QUALITY_TIERS.find(tier => tier.id === product.quality);\n  const qualityLabel = qualityTier?.label[language] || product.quality;\n  \n  const images = product.images || [];\n  \n  const nextImage = () => {\n    setCurrentImageIndex((prev) => (prev + 1) % images.length);\n  };\n  \n  const prevImage = () => {\n    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);\n  };\n\n  const generateContactMessage = () => {\n    const productName = (product.name as any)?.en || 'Product';\n    return encodeURIComponent(`I'm interested in ${productName}`);\n  };\n\n  const getContactUrl = (contact: any) => {\n    if (!contact.url) return '#';\n    \n    const message = generateContactMessage();\n    const baseUrl = contact.url;\n    \n    // Add message parameter for platforms that support it\n    if (contact.platform === 'telegram' && baseUrl.includes('t.me')) {\n      return `${baseUrl}${baseUrl.includes('?') ? '&' : '?'}text=${message}`;\n    } else if (contact.platform === 'whatsapp' && baseUrl.includes('wa.me')) {\n      return `${baseUrl}${baseUrl.includes('?') ? '&' : '?'}text=${message}`;\n    }\n    \n    return baseUrl;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl w-full max-h-[90vh] p-0 overflow-hidden\" aria-describedby=\"product-description\">\n        <DialogTitle className=\"sr-only\">{name}</DialogTitle>\n        <div className=\"flex flex-col md:flex-row h-full\">\n          {/* Image Gallery */}\n          <div className=\"md:w-1/2 bg-gray-100 relative\">\n            <div className=\"h-64 md:h-full\">\n              {images.length > 0 && (\n                <>\n                  <img\n                    src={images[currentImageIndex]}\n                    alt={`${name} - Image ${currentImageIndex + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  \n                  {images.length > 1 && (\n                    <>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white\"\n                        onClick={prevImage}\n                      >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white\"\n                        onClick={nextImage}\n                      >\n                        <ChevronRight className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      {/* Image indicators */}\n                      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n                        {images.map((_, index) => (\n                          <div\n                            key={index}\n                            className={`w-2 h-2 rounded-full transition-all ${\n                              index === currentImageIndex \n                                ? 'bg-white' \n                                : 'bg-white/50'\n                            }`}\n                          />\n                        ))}\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"absolute top-4 right-4 bg-white/80 hover:bg-white\"\n              onClick={onClose}\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Product Details */}\n          <div className=\"md:w-1/2 p-6 overflow-y-auto\">\n            <div className=\"mb-4\">\n              <Badge className={qualityTier?.className || 'bg-muted text-muted-foreground'}>\n                {qualityLabel}\n              </Badge>\n            </div>\n            \n            <h2 className=\"text-2xl font-bold mb-4\">{name}</h2>\n            <p className={`text-muted-foreground mb-6 ${\n              language === 'my' ? 'font-myanmar' : ''\n            }`}>\n              {description}\n            </p>\n            \n            {specifications.length > 0 && (\n              <div className=\"mb-6\">\n                <h4 className=\"font-medium mb-2\">Specifications</h4>\n                <ul className=\"text-muted-foreground text-sm space-y-1\">\n                  {specifications.map((spec: string, index: number) => (\n                    <li key={index} className={language === 'my' ? 'font-myanmar' : ''}>\n                      • {spec}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Contact Action Buttons */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium\">Contact to Order</h4>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {contactInfo.filter(contact => contact.isActive && contact.url).map((contact) => {\n                  const getPlatformConfig = () => {\n                    switch(contact.platform) {\n                      case 'telegram':\n                        return { name: 'Telegram', icon: 'fab fa-telegram-plane', color: 'bg-blue-500' };\n                      case 'whatsapp':\n                        return { name: 'WhatsApp', icon: 'fab fa-whatsapp', color: 'bg-green-500' };\n                      case 'messenger':\n                        return { name: 'Messenger', icon: 'fab fa-facebook-messenger', color: 'bg-blue-600' };\n                      default:\n                        return { name: contact.platform, icon: 'fas fa-message', color: 'bg-gray-500' };\n                    }\n                  };\n                  const platformConfig = getPlatformConfig();\n                  \n                  return (\n                    <Button\n                      key={contact.id}\n                      asChild\n                      className={`${platformConfig.color} hover:opacity-90 text-white`}\n                    >\n                      <a\n                        href={getContactUrl(contact)}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center justify-center space-x-2\"\n                      >\n                        <i className={platformConfig.icon} />\n                        <span>Order via {platformConfig.name}</span>\n                      </a>\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7859},"client/src/components/ProductForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { insertProductSchema, InsertProduct } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { Upload, X } from 'lucide-react';\nimport { z } from 'zod';\nimport { useState } from 'react';\nimport { ObjectUploader } from './ObjectUploader';\n// Removed Uppy import - now using Supabase storage directly\n\n// Create a form-specific schema that matches our form fields\nconst productFormSchema = z.object({\n  nameEn: z.string().min(1, 'English name is required'),\n  nameMy: z.string().min(1, 'Myanmar name is required'),\n  descriptionEn: z.string().min(1, 'English description is required'),\n  descriptionMy: z.string().min(1, 'Myanmar description is required'),\n  quality: z.enum(['high', 'medium', 'low']),\n  specificationsEn: z.string().optional(),\n  specificationsMy: z.string().optional(),\n  isActive: z.boolean().optional(),\n  existingImages: z.array(z.string()).optional(),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\ninterface ProductFormProps {\n  initialData?: Partial<ProductFormData>;\n  onSubmit: (data: InsertProduct) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n}\n\nexport function ProductForm({ initialData, onSubmit, onCancel, isSubmitting }: ProductFormProps) {\n  const { toast } = useToast();\n  const [uploadedImages, setUploadedImages] = useState<string[]>(initialData?.existingImages || []);\n  \n  const handleSupabaseUploadComplete = async (uploadedUrls: string[]) => {\n    try {\n      setUploadedImages(prev => [...prev, ...uploadedUrls]);\n      \n      toast({\n        title: \"Upload Complete\",\n        description: `Successfully uploaded ${uploadedUrls.length} image(s) to Supabase storage`,\n      });\n      \n    } catch (error) {\n      console.error('Error processing Supabase upload:', error);\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to process uploaded files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      nameEn: '',\n      nameMy: '',\n      descriptionEn: '',\n      descriptionMy: '',\n      quality: 'medium',\n      specificationsEn: '',\n      specificationsMy: '',\n      isActive: true,\n      existingImages: [],\n      ...initialData,\n    },\n  });\n\n  const handleSubmit = async (data: ProductFormData) => {\n    try {\n      console.log('Form submission data:', data);\n      \n      // Use uploaded images only (no manual URL input)\n      const allImages = uploadedImages;\n      \n      const productData: InsertProduct = {\n        name: {\n          en: data.nameEn.trim(),\n          my: data.nameMy.trim(),\n        },\n        description: {\n          en: data.descriptionEn.trim(),\n          my: data.descriptionMy.trim(),\n        },\n        quality: data.quality,\n        images: allImages,\n        videos: [], // Videos will be handled by separate upload functionality\n        specifications: {\n          en: data.specificationsEn ? data.specificationsEn.split('\\n').filter(Boolean) : [],\n          my: data.specificationsMy ? data.specificationsMy.split('\\n').filter(Boolean) : [],\n        },\n        isActive: data.isActive ?? true,\n      };\n\n      console.log('Processed product data:', productData);\n      \n      await onSubmit(productData);\n      \n      toast({\n        title: \"Success\",\n        description: initialData ? \"Product updated successfully\" : \"Product created successfully\",\n      });\n      \n    } catch (error) {\n      console.error('Form submission error:', error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n    \n    try {\n      for (const file of Array.from(files)) {\n        if (file.size > 20 * 1024 * 1024) { // 20MB limit\n          toast({\n            title: \"Error\",\n            description: `File ${file.name} is too large. Maximum size is 20MB.`,\n            variant: \"destructive\",\n          });\n          continue;\n        }\n        \n        // For now, create a temporary URL (in production, upload to object storage)\n        const tempUrl = URL.createObjectURL(file);\n        setUploadedImages(prev => [...prev, tempUrl]);\n        \n        toast({\n          title: \"File uploaded\",\n          description: `${file.name} has been prepared for upload.`,\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Upload Error\",\n        description: \"Failed to process uploaded files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const removeUploadedImage = (index: number) => {\n    setUploadedImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {initialData ? 'Edit Product' : 'Add New Product'}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"nameEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Product Name (English)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter English name\" {...field} data-testid=\"input-name-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"nameMy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-myanmar\">Product Name (မြန်မာ)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"မြန်မာအမည်ထည့်ပါ\" {...field} className=\"font-myanmar\" data-testid=\"input-name-my\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Descriptions */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"descriptionEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (English)</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Enter English description\" {...field} data-testid=\"textarea-description-en\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"descriptionMy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-myanmar\">Description (မြန်မာ)</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"မြန်မာဖော်ပြချက်ထည့်ပါ\" {...field} className=\"font-myanmar\" data-testid=\"textarea-description-my\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Quality */}\n            <FormField\n              control={form.control}\n              name=\"quality\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Quality Tier</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select quality tier\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"high\">High Quality</SelectItem>\n                      <SelectItem value=\"medium\">Medium Quality</SelectItem>\n                      <SelectItem value=\"low\">Low Quality</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Media */}\n            <div className=\"space-y-6\">\n              {/* File Upload Section */}\n              <div className=\"space-y-4\">\n                <FormLabel>Product Images</FormLabel>\n                <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6\">\n                  <div className=\"text-center\">\n                    <Upload className=\"mx-auto h-12 w-12 text-muted-foreground/50\" />\n                    <div className=\"mt-4\">\n                      <p className=\"mt-2 block text-sm font-medium text-foreground\">\n                        Upload images (max 20MB each)\n                      </p>\n                      <p className=\"mt-1 block text-xs text-muted-foreground\">\n                        PNG, JPG, GIF up to 20MB\n                      </p>\n                      <div className=\"mt-4\">\n                        <ObjectUploader\n                          maxNumberOfFiles={10}\n                          maxFileSize={20971520}\n                          onComplete={handleSupabaseUploadComplete}\n                          buttonClassName=\"w-full\"\n                        >\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Upload to Supabase Storage\n                        </ObjectUploader>\n                        <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                          <p>⚠️ Files must be uploaded to Supabase storage for proper functionality</p>\n                          <p>Supports: Images (JPG, PNG, GIF) and Videos (MP4, MOV, AVI) up to 20MB</p>\n                          <p>If upload fails, check Supabase storage bucket configuration</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Images Preview */}\n                {uploadedImages.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Product Images {initialData?.existingImages && initialData.existingImages.length > 0 ? `(${uploadedImages.length} total)` : `(${uploadedImages.length} uploaded)`}:</p>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\n                      {uploadedImages.map((image, index) => {\n                        const isExistingImage = initialData?.existingImages?.includes(image);\n                        return (\n                          <div key={index} className=\"relative group\">\n                            <img \n                              src={image} \n                              alt={`${isExistingImage ? 'Existing' : 'Uploaded'} image ${index + 1}`}\n                              className=\"w-full h-24 object-cover rounded-lg border\"\n                            />\n                            {isExistingImage && (\n                              <div className=\"absolute top-1 left-1 bg-blue-500 text-white text-xs px-1 py-0.5 rounded text-[10px]\">\n                                Existing\n                              </div>\n                            )}\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              className=\"absolute top-1 right-1 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                              onClick={() => removeUploadedImage(index)}\n                            >\n                              <X className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              {/* URL Input Section removed - using Supabase uploads only */}\n          </div>\n\n            {/* Specifications */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"specificationsEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Specifications (English)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter specifications (one per line)\" \n                        {...field}\n                        rows={4}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"specificationsMy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"font-myanmar\">Specifications (မြန်မာ)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"စပက်ဖွင့်ခေးရှင်းများထည့်ပါ (တစ်ကြောင်းလျှင် တစ်ခု)\" \n                        {...field}\n                        rows={4}\n                        className=\"font-myanmar\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  alert('Cancel button clicked! Closing form...');\n                  onCancel();\n                }}\n                disabled={isSubmitting}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\"\n                disabled={isSubmitting}\n                onClick={(e) => {\n                  console.log('Create Product button clicked!');\n                  console.log('Form errors:', form.formState.errors);\n                  console.log('Form values:', form.getValues());\n                  console.log('Form is valid:', form.formState.isValid);\n                  \n                  if (!form.formState.isValid) {\n                    console.log('Form validation failed, preventing submission');\n                    toast({\n                      title: \"Form Validation Error\",\n                      description: \"Please fill in all required fields (English name, Myanmar name, English description, Myanmar description)\",\n                      variant: \"destructive\",\n                    });\n                  }\n                }}\n                data-testid=\"button-create-product\"\n              >\n                {isSubmitting ? 'Saving...' : (initialData ? 'Update Product' : 'Create Product')}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16195},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { supabase } from '@/lib/supabase';\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (username: string, password: string) => {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email: username,\n      password,\n    });\n    return { data, error };\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    return { error };\n  };\n\n  return {\n    user,\n    loading,\n    signIn,\n    signOut,\n  };\n}\n","size_bytes":1040},"client/src/hooks/useProducts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Product, InsertProduct } from '@shared/schema';\n\nexport function useProducts(quality?: string) {\n  return useQuery({\n    queryKey: ['/api/products', quality],\n    queryFn: async () => {\n      const url = quality && quality !== 'all' ? `/api/products?quality=${quality}` : '/api/products';\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json() as Promise<Product[]>;\n    }\n  });\n}\n\nexport function useProduct(id: string) {\n  return useQuery({\n    queryKey: ['/api/products', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}`);\n      if (!response.ok) throw new Error('Failed to fetch product');\n      return response.json() as Promise<Product>;\n    },\n    enabled: !!id\n  });\n}\n\nexport function useCreateProduct() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (product: InsertProduct) => {\n      const response = await apiRequest('POST', '/api/products', product);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all product queries including filtered ones\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    }\n  });\n}\n\nexport function useUpdateProduct() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, product }: { id: string; product: Partial<InsertProduct> }) => {\n      const response = await apiRequest('PUT', `/api/products/${id}`, product);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all product queries including filtered ones\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    }\n  });\n}\n\nexport function useDeleteProduct() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/products/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate all product queries including filtered ones\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n    }\n  });\n}\n","size_bytes":2288},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://dbzagmhddcbdcrgdhnjx.supabase.co';\nconst supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRiemFnbWhkZGNiZGNyZ2Robmp4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2NzQ4NDUsImV4cCI6MjA3MTI1MDg0NX0.VGMjtba6bKgyogxqMzTYOQAUJ0N3rceT5GHeyEdwf_E';\n\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n","size_bytes":495},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { AdminSidebar } from '@/components/AdminSidebar';\nimport { ProductForm } from '@/components/ProductForm';\nimport { FaqForm } from '@/components/FaqForm';\nimport { FaqTable } from '@/components/FaqTable';\nimport { ContactManagement } from '@/components/ContactManagement';\nimport { useProducts, useCreateProduct, useUpdateProduct, useDeleteProduct } from '@/hooks/useProducts';\nimport { useFaqItems, useCreateFaqItem, useUpdateFaqItem, useDeleteFaqItem } from '@/hooks/useFaq';\nimport { useContactInfo, useUpdateContactInfo } from '@/hooks/useContacts';\nimport { Product, InsertProduct, FaqItem, InsertFaqItem, InsertContactInfo } from '@shared/schema';\nimport { QUALITY_TIERS } from '@/types';\nimport { BarChart3, Leaf, Images, MessageSquare, Plus, Edit, Trash2, Eye } from 'lucide-react';\n\nexport default function AdminPage() {\n  const [activeSection, setActiveSection] = useState('dashboard');\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [, setLocation] = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // FAQ state\n  const [showFaqForm, setShowFaqForm] = useState(false);\n  const [editingFaq, setEditingFaq] = useState<FaqItem | null>(null);\n\n  // Check authentication on mount\n  useEffect(() => {\n    const adminAuth = sessionStorage.getItem('adminAuth');\n    if (adminAuth === 'true') {\n      setIsAuthenticated(true);\n    } else {\n      // Redirect to home if not authenticated\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  // Product hooks\n  const { data: products = [], isLoading } = useProducts();\n  const createProduct = useCreateProduct();\n  const updateProduct = useUpdateProduct();\n  const deleteProduct = useDeleteProduct();\n\n  // FAQ hooks\n  const { data: faqItems = [], isLoading: faqLoading } = useFaqItems();\n  const createFaqItem = useCreateFaqItem();\n  const updateFaqItem = useUpdateFaqItem();\n  const deleteFaqItem = useDeleteFaqItem();\n\n  // Contact hooks\n  const { data: contactInfo = [], isLoading: contactLoading } = useContactInfo();\n  const updateContactInfo = useUpdateContactInfo();\n\n  const handleLogout = () => {\n    sessionStorage.removeItem('adminAuth');\n    setLocation('/');\n  };\n\n  const handleCreateProduct = async (productData: InsertProduct) => {\n    try {\n      console.log('Creating product with data:', productData);\n      await createProduct.mutateAsync(productData);\n      setShowProductForm(false);\n      console.log('Product created successfully');\n      \n      // Redirect to client homepage after successful creation\n      setTimeout(() => {\n        setLocation('/');\n      }, 1500); // Small delay to show success message\n    } catch (error) {\n      console.error('Error creating product:', error);\n      throw error; // Re-throw so the form can handle it\n    }\n  };\n\n  const handleUpdateProduct = async (productData: InsertProduct) => {\n    if (editingProduct) {\n      try {\n        console.log('Updating product with data:', productData);\n        await updateProduct.mutateAsync(\n          { id: editingProduct.id, product: productData }\n        );\n        setShowProductForm(false);\n        setEditingProduct(null);\n        console.log('Product updated successfully');\n      } catch (error) {\n        console.error('Error updating product:', error);\n        throw error; // Re-throw so the form can handle it\n      }\n    }\n  };\n\n  const handleDeleteProduct = (productId: string) => {\n    if (confirm('Are you sure you want to delete this product?')) {\n      deleteProduct.mutate(productId);\n    }\n  };\n\n  const handleDeleteAllProducts = async () => {\n    // Simplified confirmation process\n    const userConfirmation = prompt(\n      `⚠️ WARNING: This will delete ALL ${products.length} products permanently!\\n\\nThis action cannot be undone.\\n\\nType \"DELETE ALL\" to confirm:`\n    );\n    \n    if (userConfirmation === 'DELETE ALL') {\n      let successCount = 0;\n      let failCount = 0;\n      const failedProducts = [];\n\n      // Delete each product individually with better error handling\n      for (const product of products) {\n        try {\n          await deleteProduct.mutateAsync(product.id);\n          successCount++;\n        } catch (error) {\n          console.error(`Error deleting product ${product.id}:`, error);\n          failCount++;\n          failedProducts.push((product.name as any)?.en || product.id);\n        }\n      }\n\n      // Provide detailed feedback to user\n      if (failCount === 0) {\n        alert(`✅ Success! All ${successCount} products have been deleted.`);\n      } else if (successCount === 0) {\n        alert(`❌ Failed to delete any products. Please try again or delete products individually.`);\n      } else {\n        alert(`⚠️ Partial success: ${successCount} products deleted, ${failCount} failed.\\n\\nFailed products: ${failedProducts.join(', ')}`);\n      }\n    }\n  };\n\n  // FAQ handlers\n  const handleCreateFaqItem = async (faqData: InsertFaqItem) => {\n    try {\n      await createFaqItem.mutateAsync(faqData);\n      setShowFaqForm(false);\n      console.log('FAQ item created successfully');\n    } catch (error) {\n      console.error('Error creating FAQ item:', error);\n      throw error;\n    }\n  };\n\n  const handleUpdateFaqItem = async (faqData: InsertFaqItem) => {\n    if (editingFaq) {\n      try {\n        await updateFaqItem.mutateAsync({ id: editingFaq.id, faqItem: faqData });\n        setShowFaqForm(false);\n        setEditingFaq(null);\n        console.log('FAQ item updated successfully');\n      } catch (error) {\n        console.error('Error updating FAQ item:', error);\n        throw error;\n      }\n    }\n  };\n\n  const handleDeleteFaqItem = (id: string) => {\n    deleteFaqItem.mutate(id);\n  };\n\n  const handleEditFaqItem = (faqItem: FaqItem) => {\n    setEditingFaq(faqItem);\n    setShowFaqForm(true);\n  };\n\n  const handleAddFaqItem = () => {\n    setEditingFaq(null);\n    setShowFaqForm(true);\n  };\n\n  // Contact handlers\n  const handleUpdateContactInfo = async (platform: string, contactData: Partial<InsertContactInfo>) => {\n    try {\n      await updateContactInfo.mutateAsync({ platform, contactInfo: contactData });\n      console.log('Contact info updated successfully');\n    } catch (error) {\n      console.error('Error updating contact info:', error);\n      throw error;\n    }\n  };\n\n  const getQualityBadgeClass = (quality: string) => {\n    const tier = QUALITY_TIERS.find(t => t.id === quality);\n    return tier?.className || 'bg-muted text-muted-foreground';\n  };\n\n  const getQualityLabel = (quality: string) => {\n    const tier = QUALITY_TIERS.find(t => t.id === quality);\n    return tier?.label.en || quality;\n  };\n\n  const stats = {\n    totalProducts: products.length,\n    highQuality: products.filter(p => p.quality === 'high').length,\n    mediumQuality: products.filter(p => p.quality === 'medium').length,\n    lowQuality: products.filter(p => p.quality === 'low').length,\n    activeProducts: products.filter(p => p.isActive).length,\n  };\n\n  const renderDashboard = () => (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Dashboard</h2>\n      \n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <Leaf className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-muted-foreground\">Total Products</p>\n                <p className=\"text-2xl font-bold\">{stats.totalProducts}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-success/10 rounded-lg\">\n                <BarChart3 className=\"w-6 h-6 text-success\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-muted-foreground\">High Quality</p>\n                <p className=\"text-2xl font-bold\">{stats.highQuality}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-accent/10 rounded-lg\">\n                <Images className=\"w-6 h-6 text-accent\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-muted-foreground\">Active Products</p>\n                <p className=\"text-2xl font-bold\">{stats.activeProducts}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                <MessageSquare className=\"w-6 h-6 text-secondary\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-muted-foreground\">Categories</p>\n                <p className=\"text-2xl font-bold\">3</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {products.slice(0, 5).map((product) => {\n              const name = (product.name as any)?.en || 'Product';\n              return (\n                <div key={product.id} className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                  <span className=\"text-sm\">Product \"{name}\" updated</span>\n                  <span className=\"text-xs text-muted-foreground ml-auto\">Recently</span>\n                </div>\n              );\n            })}\n            {products.length === 0 && (\n              <p className=\"text-muted-foreground text-sm\">No recent activity</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderProducts = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">Products Management</h2>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={handleDeleteAllProducts} \n            variant=\"destructive\"\n            size=\"sm\"\n            disabled={products.length === 0}\n          >\n            Delete All Products\n          </Button>\n          <Button onClick={() => setShowProductForm(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add New Product\n          </Button>\n        </div>\n      </div>\n\n      {showProductForm ? (\n        <ProductForm\n          initialData={editingProduct ? {\n            nameEn: (editingProduct.name as any)?.en || '',\n            nameMy: (editingProduct.name as any)?.my || '',\n            descriptionEn: (editingProduct.description as any)?.en || '',\n            descriptionMy: (editingProduct.description as any)?.my || '',\n            quality: editingProduct.quality as \"high\" | \"medium\" | \"low\",\n            existingImages: editingProduct.images || [],\n            specificationsEn: ((editingProduct.specifications as any)?.en || []).join('\\n'),\n            specificationsMy: ((editingProduct.specifications as any)?.my || []).join('\\n'),\n            isActive: editingProduct.isActive ?? true,\n          } : undefined}\n          onSubmit={editingProduct ? handleUpdateProduct : handleCreateProduct}\n          onCancel={() => {\n            setShowProductForm(false);\n            setEditingProduct(null);\n          }}\n          isSubmitting={createProduct.isPending || updateProduct.isPending}\n        />\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-border\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Product\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Quality\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Images\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-border\">\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center\">\n                        Loading products...\n                      </td>\n                    </tr>\n                  ) : products.length === 0 ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-4 text-center text-muted-foreground\">\n                        No products found. Create your first product to get started.\n                      </td>\n                    </tr>\n                  ) : (\n                    products.map((product) => {\n                      const name = (product.name as any)?.en || 'Product';\n                      const description = (product.description as any)?.my || '';\n                      const previewImage = product.images?.[0];\n                      \n                      return (\n                        <tr key={product.id}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"flex-shrink-0 h-10 w-10\">\n                                {previewImage ? (\n                                  <img \n                                    className=\"h-10 w-10 rounded-lg object-cover\" \n                                    src={previewImage} \n                                    alt={name}\n                                  />\n                                ) : (\n                                  <div className=\"h-10 w-10 rounded-lg bg-muted flex items-center justify-center\">\n                                    <Images className=\"w-4 h-4 text-muted-foreground\" />\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-foreground\">{name}</div>\n                                <div className=\"text-sm text-muted-foreground font-myanmar line-clamp-1\">\n                                  {description}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge className={getQualityBadgeClass(product.quality)}>\n                              {getQualityLabel(product.quality)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                            {product.images?.length || 0} images\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge variant={product.isActive ? 'default' : 'secondary'}>\n                              {product.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setEditingProduct(product);\n                                  setShowProductForm(true);\n                                }}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-destructive hover:text-destructive\"\n                                onClick={() => handleDeleteProduct(product.id)}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case 'dashboard':\n        return renderDashboard();\n      case 'products':\n        return renderProducts();\n      case 'media':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Media Management</h2>\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-muted-foreground\">Media management functionality coming soon.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case 'content':\n        return (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Content Management</h2>\n            <Card>\n              <CardContent className=\"p-6\">\n                <p className=\"text-muted-foreground\">Content management functionality coming soon.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      case 'contacts':\n        return (\n          <ContactManagement\n            contactInfo={contactInfo}\n            isLoading={contactLoading}\n            onUpdate={handleUpdateContactInfo}\n            isUpdating={updateContactInfo.isPending}\n          />\n        );\n      case 'faq':\n        return (\n          <div className=\"space-y-6\">\n            {showFaqForm ? (\n              <FaqForm\n                initialData={editingFaq ? {\n                  questionEn: (editingFaq.question as any)?.en || '',\n                  questionMy: (editingFaq.question as any)?.my || '',\n                  answerEn: (editingFaq.answer as any)?.en || '',\n                  answerMy: (editingFaq.answer as any)?.my || '',\n                  order: editingFaq.order || 0,\n                  isActive: editingFaq.isActive ?? true,\n                } : undefined}\n                onSubmit={editingFaq ? handleUpdateFaqItem : handleCreateFaqItem}\n                onCancel={() => {\n                  setShowFaqForm(false);\n                  setEditingFaq(null);\n                }}\n                isSubmitting={createFaqItem.isPending || updateFaqItem.isPending}\n                isEditing={!!editingFaq}\n              />\n            ) : (\n              <FaqTable\n                faqItems={faqItems}\n                isLoading={faqLoading}\n                onEdit={handleEditFaqItem}\n                onDelete={handleDeleteFaqItem}\n                onAdd={handleAddFaqItem}\n              />\n            )}\n          </div>\n        );\n      default:\n        return renderDashboard();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cannabis-bg flex\">\n      <AdminSidebar\n        activeSection={activeSection}\n        onSectionChange={setActiveSection}\n        onLogout={handleLogout}\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n      />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-6\">\n          {renderContent()}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":20908},"client/src/pages/home.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Header } from '@/components/Header';\nimport { ProductCard } from '@/components/ProductCard';\nimport { ProductDetailModal } from '@/components/ProductDetailModal';\nimport { useProducts, useProduct } from '@/hooks/useProducts';\nimport { useFaqItems } from '@/hooks/useFaq';\nimport { useContactInfo } from '@/hooks/useContacts';\nimport { Language, QUALITY_TIERS } from '@/types';\n\nexport default function HomePage() {\n  const [language, setLanguage] = useState<Language>('my');\n  const [selectedQuality, setSelectedQuality] = useState<string>('all');\n  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);\n  const [showAdminLogin, setShowAdminLogin] = useState(false);\n  const [adminCredentials, setAdminCredentials] = useState({ username: '', password: '' });\n  const [, setLocation] = useLocation();\n\n  const { data: products = [], isLoading } = useProducts(selectedQuality);\n  const { data: selectedProduct } = useProduct(selectedProductId || '');\n  const { data: faqItems = [] } = useFaqItems();\n  const { data: contactInfo = [] } = useContactInfo();\n\n  const handleAdminLogin = () => {\n    setShowAdminLogin(true);\n  };\n\n  const handleAdminSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Check admin credentials\n    if (adminCredentials.username === 'admin' && adminCredentials.password === 'admin') {\n      setShowAdminLogin(false);\n      setLocation('/admin');\n      // Store admin session\n      sessionStorage.setItem('adminAuth', 'true');\n    } else {\n      alert('Invalid credentials. Only admin/admin is allowed.');\n    }\n  };\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cannabis-bg\">\n      <Header \n        currentLanguage={language}\n        onLanguageChange={setLanguage}\n        onAdminLogin={handleAdminLogin}\n      />\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-primary to-secondary text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-6xl font-bold mb-4 font-myanmar\">\n            အရည်အသွေးမြင့် ကန်နာဗစ်\n          </h2>\n          <p className=\"text-xl md:text-2xl mb-8 opacity-90\">\n            Premium Quality Cannabis Products\n          </p>\n          <p className=\"text-lg max-w-2xl mx-auto opacity-80\">\n            Carefully curated selection of high-quality cannabis products with direct seller communication\n          </p>\n        </div>\n      </section>\n      {/* Product Catalog */}\n      <section id=\"products\" className=\"py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Quality Filter Buttons */}\n          <div className=\"flex flex-wrap justify-center gap-3 mb-8\">\n            <Button\n              variant={selectedQuality === 'all' ? 'default' : 'outline'}\n              size=\"sm\"\n              className=\"px-4 py-2 text-sm font-medium\"\n              onClick={() => setSelectedQuality('all')}\n            >\n              All Products\n            </Button>\n            {QUALITY_TIERS.map((tier) => (\n              <Button\n                key={tier.id}\n                variant={selectedQuality === tier.id ? 'default' : 'outline'}\n                size=\"sm\"\n                className=\"px-4 py-2 text-sm font-medium\"\n                onClick={() => setSelectedQuality(tier.id)}\n              >\n                {tier.label[language]}\n              </Button>\n            ))}\n          </div>\n\n          {/* Product Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n              {Array.from({ length: 10 }).map((_, index) => (\n                <div key={index} className=\"animate-pulse\">\n                  <div className=\"bg-gray-300 rounded-lg mb-3\" style={{ aspectRatio: '9/16', minHeight: '200px' }}></div>\n                  <div className=\"h-3 bg-gray-300 rounded mb-2\"></div>\n                  <div className=\"h-2 bg-gray-300 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n              {products.map((product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  language={language}\n                  onClick={() => setSelectedProductId(product.id)}\n                />\n              ))}\n            </div>\n          )}\n\n          {products.length === 0 && !isLoading && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No products found in this category.</p>\n            </div>\n          )}\n        </div>\n      </section>\n      {/* About Section */}\n      <section id=\"about\" className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-8 font-myanmar\">\n            ကျွန်ုပ်တို့အကြောင်း\n          </h2>\n          <div className=\"prose prose-lg mx-auto\">\n            <p className=\"text-muted-foreground mb-6\">\n              Nyo is Myanmar's premier cannabis provider, committed to delivering the highest quality products \n              through direct seller communication. We ensure authenticity, quality, and customer satisfaction \n              in every transaction.\n            </p>\n            <p className=\"text-muted-foreground font-myanmar\">ပထမဆုံး အွန်လိုင်း ကန်နဗစ်</p>\n          </div>\n        </div>\n      </section>\n      {/* How to Order Section */}\n      <section id=\"how-to-order\" className=\"py-16 bg-cannabis-bg\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center mb-12 font-myanmar\">\n            မှာယူပုံ\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {contactInfo.filter(contact => contact.isActive).map((contact) => {\n              const getPlatformConfig = () => {\n                switch(contact.platform) {\n                  case 'telegram':\n                    return { name: 'Telegram', icon: 'fab fa-telegram-plane', color: 'bg-blue-500', desc: 'Fast and secure messaging' };\n                  case 'whatsapp':\n                    return { name: 'WhatsApp', icon: 'fab fa-whatsapp', color: 'bg-green-500', desc: 'Direct messaging and calls' };\n                  case 'messenger':\n                    return { name: 'Messenger', icon: 'fab fa-facebook-messenger', color: 'bg-blue-600', desc: 'Facebook messaging' };\n                  default:\n                    return { name: contact.platform, icon: 'fas fa-message', color: 'bg-gray-500', desc: 'Contact us' };\n                }\n              };\n              const platformConfig = getPlatformConfig();\n              \n              return (\n                <Card key={contact.platform} className=\"text-center shadow-lg\">\n                  <CardContent className=\"p-6\">\n                    <div className={`w-16 h-16 ${platformConfig.color} rounded-full flex items-center justify-center mx-auto mb-4`}>\n                      <i className={`${platformConfig.icon} text-white text-2xl`} />\n                    </div>\n                    <h3 className=\"font-bold text-lg mb-2\">{platformConfig.name}</h3>\n                    <p className=\"text-muted-foreground text-sm mb-4\">\n                      {platformConfig.desc}\n                    </p>\n                    <div className=\"w-32 h-32 bg-gray-100 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                      {contact.qrCode ? (\n                        <img \n                          src={contact.qrCode} \n                          alt={`${platformConfig.name} QR Code`}\n                          className=\"w-full h-full object-cover rounded-lg\"\n                        />\n                      ) : (\n                        <span className=\"text-xs text-muted-foreground\">QR Code</span>\n                      )}\n                    </div>\n                    <Button \n                      className={`${platformConfig.color} hover:opacity-90 text-white`}\n                      onClick={() => contact.url && window.open(contact.url, '_blank')}\n                      disabled={!contact.url}\n                    >\n                      Contact via {platformConfig.name}\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n      {/* FAQ Section */}\n      <section id=\"faq\" className=\"py-16 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-center mb-12 font-myanmar\">\n            မေးလေ့ရှိသောမေးခွန်းများ\n          </h2>\n          <Accordion type=\"single\" collapsible>\n            {faqItems.length > 0 ? (\n              faqItems.map((faq, index) => (\n                <AccordionItem key={faq.id} value={`item-${index + 1}`}>\n                  <AccordionTrigger className={language === 'my' ? 'font-myanmar' : ''}>\n                    {language === 'my' && (faq.question as any)?.my \n                      ? (faq.question as any).my \n                      : (faq.question as any)?.en || 'Question not available'}\n                  </AccordionTrigger>\n                  <AccordionContent className={language === 'my' ? 'font-myanmar' : ''}>\n                    {language === 'my' && (faq.answer as any)?.my \n                      ? (faq.answer as any).my \n                      : (faq.answer as any)?.en || 'Answer not available'}\n                  </AccordionContent>\n                </AccordionItem>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No FAQ items available.</p>\n              </div>\n            )}\n          </Accordion>\n        </div>\n      </section>\n      {/* Product Detail Modal */}\n      <ProductDetailModal\n        product={selectedProduct || null}\n        language={language}\n        isOpen={!!selectedProductId}\n        onClose={() => setSelectedProductId(null)}\n      />\n      {/* Admin Login Modal */}\n      <Dialog open={showAdminLogin} onOpenChange={setShowAdminLogin}>\n        <DialogContent className=\"max-w-md\">\n          <div className=\"text-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-primary mb-2\">Admin Login</h2>\n            <p className=\"text-muted-foreground\">Enter your credentials to access the admin panel</p>\n          </div>\n          \n          <form onSubmit={handleAdminSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Username</label>\n              <input \n                type=\"text\" \n                className=\"w-full px-3 py-2 border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\" \n                value={adminCredentials.username}\n                onChange={(e) => setAdminCredentials(prev => ({ ...prev, username: e.target.value }))}\n                required \n                data-testid=\"input-admin-username\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Password</label>\n              <input \n                type=\"password\" \n                className=\"w-full px-3 py-2 border border-input rounded-lg focus:outline-none focus:ring-2 focus:ring-primary\" \n                value={adminCredentials.password}\n                onChange={(e) => setAdminCredentials(prev => ({ ...prev, password: e.target.value }))}\n                required \n                data-testid=\"input-admin-password\"\n              />\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => setShowAdminLogin(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" className=\"flex-1\">\n                Login\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12970},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export type Language = 'en' | 'my';\n\nexport interface MultilingualText {\n  en: string;\n  my: string;\n}\n\nexport interface QualityTier {\n  id: 'high' | 'medium' | 'low';\n  label: MultilingualText;\n  className: string;\n}\n\nexport const QUALITY_TIERS: QualityTier[] = [\n  {\n    id: 'high',\n    label: { en: 'High Quality', my: 'အရည်အသွေးမြင့်' },\n    className: 'quality-high'\n  },\n  {\n    id: 'medium', \n    label: { en: 'Medium Quality', my: 'အလယ်အလတ်' },\n    className: 'quality-medium'\n  },\n  {\n    id: 'low',\n    label: { en: 'Low Quality', my: 'သက်သာသောစျေးနှုန်း' },\n    className: 'quality-low'\n  }\n];\n\nexport const CONTACT_PLATFORMS = [\n  { id: 'telegram', name: 'Telegram', icon: 'fab fa-telegram-plane', color: 'bg-blue-500' },\n  { id: 'whatsapp', name: 'WhatsApp', icon: 'fab fa-whatsapp', color: 'bg-green-500' },\n  { id: 'messenger', name: 'Messenger', icon: 'fab fa-facebook-messenger', color: 'bg-blue-600' },\n];\n","size_bytes":1004},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ContactManagement.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Switch } from '@/components/ui/switch';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { ContactInfo, InsertContactInfo } from '@shared/schema';\nimport { z } from 'zod';\nimport { Save, Upload, X, MessageCircle, Phone, Facebook, ExternalLink, QrCode } from 'lucide-react';\nimport { ObjectUploader } from './ObjectUploader';\n\nconst contactFormSchema = z.object({\n  url: z.string().url('Please enter a valid URL'),\n  isActive: z.boolean(),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\ninterface ContactManagementProps {\n  contactInfo: ContactInfo[];\n  isLoading: boolean;\n  onUpdate: (platform: string, data: Partial<InsertContactInfo>) => Promise<void>;\n  isUpdating?: boolean;\n}\n\ninterface PlatformConfig {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  color: string;\n  urlLabel: string;\n  placeholder: string;\n}\n\nconst PLATFORMS: PlatformConfig[] = [\n  {\n    id: 'telegram',\n    name: 'Telegram',\n    icon: <MessageCircle className=\"w-5 h-5\" />,\n    color: 'bg-blue-500',\n    urlLabel: 'Telegram Link',\n    placeholder: 'https://t.me/yourusername'\n  },\n  {\n    id: 'whatsapp',\n    name: 'WhatsApp',\n    icon: <Phone className=\"w-5 h-5\" />,\n    color: 'bg-green-500',\n    urlLabel: 'WhatsApp Link',\n    placeholder: 'https://wa.me/1234567890'\n  },\n  {\n    id: 'messenger',\n    name: 'Messenger',\n    icon: <Facebook className=\"w-5 h-5\" />,\n    color: 'bg-blue-600',\n    urlLabel: 'Messenger Link',\n    placeholder: 'https://m.me/yourpage'\n  }\n];\n\nexport function ContactManagement({ contactInfo, isLoading, onUpdate, isUpdating }: ContactManagementProps) {\n  const { toast } = useToast();\n  const [editingPlatform, setEditingPlatform] = useState<string | null>(null);\n  const [uploadingQR, setUploadingQR] = useState<string | null>(null);\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n    defaultValues: {\n      url: '',\n      isActive: true,\n    },\n  });\n\n  const getContactForPlatform = (platform: string) => {\n    return contactInfo.find(contact => contact.platform === platform);\n  };\n\n  const handleEdit = (platform: string) => {\n    const contact = getContactForPlatform(platform);\n    if (contact) {\n      form.reset({\n        url: contact.url,\n        isActive: contact.isActive ?? true,\n      });\n    } else {\n      form.reset({\n        url: '',\n        isActive: true,\n      });\n    }\n    setEditingPlatform(platform);\n  };\n\n  const handleCancel = () => {\n    setEditingPlatform(null);\n    form.reset();\n  };\n\n  const handleSubmit = async (formData: ContactFormData) => {\n    if (!editingPlatform) return;\n\n    try {\n      const contactData: Partial<InsertContactInfo> = {\n        platform: editingPlatform,\n        url: formData.url,\n        isActive: formData.isActive,\n      };\n\n      await onUpdate(editingPlatform, contactData);\n      setEditingPlatform(null);\n      form.reset();\n      \n      toast({\n        title: \"Contact Updated\",\n        description: `${PLATFORMS.find(p => p.id === editingPlatform)?.name} contact information has been updated successfully`,\n      });\n    } catch (error) {\n      console.error('Error updating contact:', error);\n      toast({\n        title: \"Update Error\",\n        description: \"Failed to update contact information\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleQRUploadComplete = async (platform: string, uploadedUrls: string[]) => {\n    if (uploadedUrls.length > 0) {\n      const qrCodeUrl = uploadedUrls[0]; // Take the first uploaded image\n      \n      try {\n        onUpdate(platform, { qrCode: qrCodeUrl });\n        setUploadingQR(null);\n        \n        toast({\n          title: \"QR Code Updated\",\n          description: `QR code for ${PLATFORMS.find(p => p.id === platform)?.name} has been updated`,\n        });\n      } catch (error) {\n        console.error('Error updating QR code:', error);\n        toast({\n          title: \"Update Error\",\n          description: \"Failed to update QR code\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h2 className=\"text-2xl font-bold\">Contact Management</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {PLATFORMS.map((platform) => (\n            <Card key={platform.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-center h-32\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold\">Contact Management</h2>\n      <p className=\"text-muted-foreground\">\n        Manage your messaging platform links and QR codes for customer contact.\n      </p>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {PLATFORMS.map((platform) => {\n          const contact = getContactForPlatform(platform.id);\n          const isEditing = editingPlatform === platform.id;\n\n          return (\n            <Card key={platform.id} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-3\">\n                  <div className={`p-2 rounded-lg text-white ${platform.color}`}>\n                    {platform.icon}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold\">{platform.name}</div>\n                    <Badge variant={contact?.isActive ? 'default' : 'secondary'} className=\"mt-1\">\n                      {contact?.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {isEditing ? (\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"url\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{platform.urlLabel}</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder={platform.placeholder}\n                                data-testid={`input-url-${platform.id}`}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"isActive\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                            <div className=\"space-y-0.5\">\n                              <FormLabel className=\"text-sm\">Active</FormLabel>\n                              <div className=\"text-xs text-muted-foreground\">\n                                Show this contact option\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid={`switch-active-${platform.id}`}\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"submit\"\n                          size=\"sm\"\n                          disabled={isUpdating}\n                          data-testid={`button-save-${platform.id}`}\n                        >\n                          <Save className=\"w-4 h-4 mr-1\" />\n                          {isUpdating ? 'Saving...' : 'Save'}\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={handleCancel}\n                          data-testid={`button-cancel-${platform.id}`}\n                        >\n                          <X className=\"w-4 h-4 mr-1\" />\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"text-sm font-medium text-muted-foreground mb-1\">Current Link</div>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"text-sm break-all\" data-testid={`text-url-${platform.id}`}>\n                          {contact?.url || 'No link set'}\n                        </div>\n                        {contact?.url && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            className=\"p-1 h-auto\"\n                            onClick={() => window.open(contact.url, '_blank')}\n                            data-testid={`button-open-${platform.id}`}\n                          >\n                            <ExternalLink className=\"w-3 h-3\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n\n                    <div>\n                      <div className=\"text-sm font-medium text-muted-foreground mb-2\">QR Code</div>\n                      {contact?.qrCode ? (\n                        <div className=\"relative\">\n                          <img \n                            src={contact.qrCode} \n                            alt={`${platform.name} QR Code`}\n                            className=\"w-24 h-24 rounded-lg border object-cover\"\n                            data-testid={`img-qr-${platform.id}`}\n                          />\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"mt-2 w-full\"\n                            onClick={() => setUploadingQR(platform.id)}\n                            data-testid={`button-change-qr-${platform.id}`}\n                          >\n                            <QrCode className=\"w-4 h-4 mr-1\" />\n                            Change QR Code\n                          </Button>\n                        </div>\n                      ) : (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full\"\n                          onClick={() => setUploadingQR(platform.id)}\n                          data-testid={`button-upload-qr-${platform.id}`}\n                        >\n                          <Upload className=\"w-4 h-4 mr-1\" />\n                          Upload QR Code\n                        </Button>\n                      )}\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      onClick={() => handleEdit(platform.id)}\n                      data-testid={`button-edit-${platform.id}`}\n                    >\n                      Edit {platform.name}\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n\n              {uploadingQR === platform.id && (\n                <div className=\"absolute inset-0 bg-background/95 backdrop-blur-sm rounded-lg p-4 flex flex-col\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"font-semibold\">Upload QR Code for {platform.name}</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setUploadingQR(null)}\n                      data-testid={`button-close-upload-${platform.id}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <ObjectUploader\n                    maxNumberOfFiles={1}\n                    onComplete={(urls: string[]) => handleQRUploadComplete(platform.id, urls)}\n                  >\n                    <div className=\"text-center\">\n                      <Upload className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Click to upload QR code image\n                      </p>\n                    </div>\n                  </ObjectUploader>\n                </div>\n              )}\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":13661},"client/src/components/FaqForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { InsertFaqItem } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\nimport { z } from 'zod';\nimport { Save, X } from 'lucide-react';\n\n// Create a form-specific schema that matches our form fields\nconst faqFormSchema = z.object({\n  questionEn: z.string().min(1, 'English question is required'),\n  questionMy: z.string().min(1, 'Myanmar question is required'),\n  answerEn: z.string().min(1, 'English answer is required'),\n  answerMy: z.string().min(1, 'Myanmar answer is required'),\n  order: z.number().min(0, 'Order must be 0 or greater').optional(),\n  isActive: z.boolean().optional(),\n});\n\ntype FaqFormData = z.infer<typeof faqFormSchema>;\n\ninterface FaqFormProps {\n  initialData?: Partial<FaqFormData>;\n  onSubmit: (data: InsertFaqItem) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n  isEditing?: boolean;\n}\n\nexport function FaqForm({ initialData, onSubmit, onCancel, isSubmitting, isEditing }: FaqFormProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<FaqFormData>({\n    resolver: zodResolver(faqFormSchema),\n    defaultValues: {\n      questionEn: '',\n      questionMy: '',\n      answerEn: '',\n      answerMy: '',\n      order: 0,\n      isActive: true,\n      ...initialData,\n    },\n  });\n\n  const handleSubmit = (formData: FaqFormData) => {\n    try {\n      console.log('FAQ Form submission data:', formData);\n      \n      // Transform form data to match the database schema\n      const faqData: InsertFaqItem = {\n        question: {\n          en: formData.questionEn,\n          my: formData.questionMy,\n        },\n        answer: {\n          en: formData.answerEn,\n          my: formData.answerMy,\n        },\n        order: formData.order || 0,\n        isActive: formData.isActive ?? true,\n      };\n\n      console.log('Processed FAQ data:', faqData);\n      onSubmit(faqData);\n    } catch (error) {\n      console.error('Error processing FAQ form:', error);\n      toast({\n        title: \"Form Error\",\n        description: \"Failed to process form data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          {isEditing ? (\n            <>\n              <Save className=\"w-5 h-5\" />\n              Edit FAQ Item\n            </>\n          ) : (\n            <>\n              <Save className=\"w-5 h-5\" />\n              Create New FAQ Item\n            </>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* English Question */}\n              <FormField\n                control={form.control}\n                name=\"questionEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Question (English)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter question in English...\"\n                        className=\"min-h-[80px]\"\n                        data-testid=\"input-question-en\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Myanmar Question */}\n              <FormField\n                control={form.control}\n                name=\"questionMy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Question (Myanmar)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"မြန်မာလို မေးခွန်းရိုက်ထည့်ပါ...\"\n                        className=\"min-h-[80px] font-myanmar\"\n                        data-testid=\"input-question-my\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* English Answer */}\n              <FormField\n                control={form.control}\n                name=\"answerEn\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Answer (English)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter detailed answer in English...\"\n                        className=\"min-h-[120px]\"\n                        data-testid=\"input-answer-en\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Myanmar Answer */}\n              <FormField\n                control={form.control}\n                name=\"answerMy\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Answer (Myanmar)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"မြန်မာလို အပြည့်အစုံ ဖြေကြားချက်ရိုက်ထည့်ပါ...\"\n                        className=\"min-h-[120px] font-myanmar\"\n                        data-testid=\"input-answer-my\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Order */}\n              <FormField\n                control={form.control}\n                name=\"order\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Display Order</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={0}\n                        placeholder=\"0\"\n                        data-testid=\"input-order\"\n                        {...field}\n                        value={field.value || ''}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Active Status */}\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Active Status\n                      </FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Show this FAQ item on the website\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex gap-3 justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                data-testid=\"button-submit\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {isSubmitting ? 'Saving...' : (isEditing ? 'Update FAQ' : 'Create FAQ')}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8894},"client/src/components/FaqTable.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Edit, Trash2, HelpCircle, Plus, ArrowUpDown } from 'lucide-react';\nimport { FaqItem } from '@shared/schema';\n\ninterface FaqTableProps {\n  faqItems: FaqItem[];\n  isLoading: boolean;\n  onEdit: (faqItem: FaqItem) => void;\n  onDelete: (id: string) => void;\n  onAdd: () => void;\n}\n\nexport function FaqTable({ faqItems, isLoading, onEdit, onDelete, onAdd }: FaqTableProps) {\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n\n  // Sort FAQ items by order field\n  const sortedFaqItems = [...faqItems].sort((a, b) => {\n    const orderA = a.order || 0;\n    const orderB = b.order || 0;\n    return sortOrder === 'asc' ? orderA - orderB : orderB - orderA;\n  });\n\n  const toggleSort = () => {\n    setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n  };\n\n  const handleDelete = (id: string, question: string) => {\n    if (confirm(`Are you sure you want to delete this FAQ?\\n\\n\"${question}\"\\n\\nThis action cannot be undone.`)) {\n      onDelete(id);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold\">FAQ Management</h2>\n        <Button onClick={onAdd} data-testid=\"button-add-faq\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add New FAQ\n        </Button>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-border\">\n              <thead className=\"bg-muted/50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Question\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Answer Preview\n                  </th>\n                  <th \n                    className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted/80\"\n                    onClick={toggleSort}\n                    data-testid=\"header-order\"\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      Order\n                      <ArrowUpDown className=\"w-3 h-3\" />\n                    </div>\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-border\">\n                {isLoading ? (\n                  <tr>\n                    <td colSpan={5} className=\"px-6 py-4 text-center\">\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <HelpCircle className=\"w-4 h-4 animate-spin\" />\n                        Loading FAQ items...\n                      </div>\n                    </td>\n                  </tr>\n                ) : sortedFaqItems.length === 0 ? (\n                  <tr>\n                    <td colSpan={5} className=\"px-6 py-4 text-center text-muted-foreground\">\n                      <div className=\"flex flex-col items-center gap-2\">\n                        <HelpCircle className=\"w-8 h-8 text-muted-foreground/50\" />\n                        <div>No FAQ items found.</div>\n                        <div className=\"text-sm\">Create your first FAQ item to get started.</div>\n                      </div>\n                    </td>\n                  </tr>\n                ) : (\n                  sortedFaqItems.map((faqItem, index) => {\n                    const questionEn = (faqItem.question as any)?.en || 'Question';\n                    const questionMy = (faqItem.question as any)?.my || '';\n                    const answerEn = (faqItem.answer as any)?.en || '';\n                    const answerMy = (faqItem.answer as any)?.my || '';\n                    \n                    // Create preview of answer (first 100 characters)\n                    const answerPreview = answerEn.length > 100 \n                      ? answerEn.substring(0, 100) + '...' \n                      : answerEn;\n                    \n                    return (\n                      <tr key={faqItem.id} data-testid={`row-faq-${index}`}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"max-w-xs\">\n                            <div className=\"text-sm font-medium text-foreground line-clamp-2\" data-testid={`text-question-en-${index}`}>\n                              {questionEn}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground font-myanmar line-clamp-1 mt-1\" data-testid={`text-question-my-${index}`}>\n                              {questionMy}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"max-w-md\">\n                            <div className=\"text-sm text-muted-foreground line-clamp-3\" data-testid={`text-answer-preview-${index}`}>\n                              {answerPreview}\n                            </div>\n                            {answerMy && (\n                              <div className=\"text-sm text-muted-foreground/80 font-myanmar line-clamp-2 mt-1\" data-testid={`text-answer-my-${index}`}>\n                                {answerMy.length > 100 ? answerMy.substring(0, 100) + '...' : answerMy}\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge variant=\"outline\" data-testid={`badge-order-${index}`}>\n                            {faqItem.order || 0}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Badge \n                            variant={faqItem.isActive ? 'default' : 'secondary'}\n                            data-testid={`badge-status-${index}`}\n                          >\n                            {faqItem.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => onEdit(faqItem)}\n                              data-testid={`button-edit-${index}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-destructive hover:text-destructive\"\n                              onClick={() => handleDelete(faqItem.id, questionEn)}\n                              data-testid={`button-delete-${index}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })\n                )}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8098},"client/src/hooks/useContacts.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { ContactInfo, InsertContactInfo } from '@shared/schema';\n\nexport function useContactInfo() {\n  return useQuery({\n    queryKey: ['/api/contacts'],\n    queryFn: async () => {\n      const response = await fetch('/api/contacts');\n      if (!response.ok) throw new Error('Failed to fetch contact info');\n      return response.json() as Promise<ContactInfo[]>;\n    }\n  });\n}\n\nexport function useUpdateContactInfo() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ platform, contactInfo }: { platform: string; contactInfo: Partial<InsertContactInfo> }) => {\n      console.log('Updating contact info via mutation:', { platform, contactInfo });\n      const response = await apiRequest('PUT', `/api/contacts/${platform}`, contactInfo);\n      const result = await response.json();\n      console.log('Mutation response result:', result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('Mutation succeeded, invalidating queries. Response data:', data);\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n    },\n    onError: (error) => {\n      console.error('Mutation failed:', error);\n    }\n  });\n}","size_bytes":1309},"client/src/hooks/useFaq.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { FaqItem, InsertFaqItem } from '@shared/schema';\n\nexport function useFaqItems() {\n  return useQuery({\n    queryKey: ['/api/faq'],\n    queryFn: async () => {\n      const response = await fetch('/api/faq');\n      if (!response.ok) throw new Error('Failed to fetch FAQ items');\n      return response.json() as Promise<FaqItem[]>;\n    }\n  });\n}\n\nexport function useCreateFaqItem() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (faqItem: InsertFaqItem) => {\n      const response = await apiRequest('POST', '/api/faq', faqItem);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faq'] });\n    }\n  });\n}\n\nexport function useUpdateFaqItem() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ id, faqItem }: { id: string; faqItem: Partial<InsertFaqItem> }) => {\n      const response = await apiRequest('PUT', `/api/faq/${id}`, faqItem);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faq'] });\n    }\n  });\n}\n\nexport function useDeleteFaqItem() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/faq/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faq'] });\n    }\n  });\n}","size_bytes":1604},"attached_assets/content-1759162938446.md":{"content":"[Recent News](https://telegram.org/blog)\n\n[Aug 31\\\\\n\\\\\nMusic on Profiles, Stickers Mini App, New Profiles, and More](https://telegram.org/blog/profile-music-gift-themes) [Jul 31\\\\\n\\\\\nPublic Post Search, Story Albums, Gift Collections and More](https://telegram.org/blog/post-search-story-albums-and-more) [Jul 1\\\\\n\\\\\nChecklists, Suggested Posts and More Monetization Options for Channels](https://telegram.org/blog/checklists-suggested-posts)\n\na new era of messaging\n\n[Telegram for **Android**](https://telegram.org/android) [Telegram for **iPhone** / **iPad**](https://telegram.org/dl/ios) [Telegram for **Windows / Mac / Linux**](https://desktop.telegram.org/) [Browse more Telegram apps](https://telegram.org/apps)\n\n[Telegram for **PC / Linux**](https://desktop.telegram.org/) [Telegram for **macOS**](https://macos.telegram.org/)\n\n### [Recent News](https://telegram.org/blog)\n\n[![](https://telegram.org/file/400780400709/2/RorFwwKBYv4.261880.jpg/38bc73c3c25b5c2b76)\\\\\n\\\\\n**Music on Profiles, Stickers Mini App, New Profiles, and More** \\\\\n\\\\\nIn today’s update, you can add music to your profile, choose a default profile tab, set unique chat themes based on your collectible gifts…\\\\\n\\\\\nAug 31, 2025](https://telegram.org/blog/profile-music-gift-themes) [![](https://telegram.org/file/400780400371/5/gL4V1kMeCr0.275883.jpg/2227243ef9b761242a)\\\\\n\\\\\n**Public Post Search, Story Albums, Gift Collections and More** \\\\\n\\\\\nToday's update introduces global search for public posts on Telegram, sorting stories into albums and organizing gifts into collections…\\\\\n\\\\\nJul 31, 2025](https://telegram.org/blog/post-search-story-albums-and-more)\n\n### Why Telegram?\n\n### Simple\n\n**Telegram** is so simple you already know how to use it.\n\n### Private\n\n**Telegram** messages are heavily encrypted and can self-destruct.\n\n### Synced\n\n**Telegram** lets you access your chats from multiple devices.\n\n### Fast\n\n**Telegram** delivers messages faster than any other application.\n\n### Powerful\n\n**Telegram** has no limits on the size of your media and chats.\n\n### Open\n\n**Telegram** has an open [API](https://core.telegram.org/api) and source code free for everyone.\n\n### Secure\n\n**Telegram** keeps your messages safe from hacker attacks.\n\n### Social\n\n**Telegram** groups can hold up to 200,000 members.\n\n### Expressive\n\n**Telegram** lets you completely customize your messenger.\n\n##### Telegram\n\nTelegram is a cloud-based mobile and desktop messaging app with a focus on security and speed.\n\n\n##### [About](https://telegram.org/faq)\n\n- [FAQ](https://telegram.org/faq)\n- [Privacy](https://telegram.org/privacy)\n- [Press](https://telegram.org/press)\n\n##### [Mobile Apps](https://telegram.org/apps\\#mobile-apps)\n\n- [iPhone/iPad](https://telegram.org/dl/ios)\n- [Android](https://telegram.org/android)\n- [Mobile Web](https://telegram.org/dl/web)\n\n##### [Desktop Apps](https://telegram.org/apps\\#desktop-apps)\n\n- [PC/Mac/Linux](https://desktop.telegram.org/)\n- [macOS](https://macos.telegram.org/)\n- [Web-browser](https://telegram.org/dl/web)\n\n##### [Platform](https://core.telegram.org/)\n\n- [API](https://core.telegram.org/api)\n- [Translations](https://translations.telegram.org/)\n- [Instant View](https://instantview.telegram.org/)\n\n##### [About](https://telegram.org/faq)\n\n##### [Blog](https://telegram.org/blog)\n\n##### [Press](https://telegram.org/press)\n\n##### [Moderation](https://telegram.org/moderation)","size_bytes":3397}},"version":1}